{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../../App.svelte",
    "../../../Article.svelte",
    "../../../article.svelte",
    "../../../ActivationAnimator.svelte",
    "../../../Activationview.svelte",
    "../../../ConvolutionAnimator.svelte",
    "../../../Convolutionview.svelte",
    "../../../HyperparameterAnimator.svelte",
    "../../../Hyperparameterview.svelte",
    "../../../PoolAnimator.svelte",
    "../../../Poolview.svelte",
    "../../../Softmaxview.svelte",
    "../../../Modal.svelte",
    "../../../Overview.svelte",
    "../../../Explainer.svelte",
    "../../../Graph1_Animator.svelte",
    "../../../Graph1_view.svelte",
    "../../../Knn.svelte",
    "../../../Tree.svelte",
    "../../../home.svelte",
    "../../../home2.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Router from \"svelte-spa-router\";\n  import { link } from \"svelte-spa-router\";\n  import { routes } from \"./route\";\n</script>\n\n<style>\n  #app-page {\n    height: 100%;\n  }\n  #app-page .content {\n    padding-top: 90px;\n    height: 100%;\n    font-family: 'Open Sans', Helvetica, Arial, sans-serif;\n  }\n  #app-page .page_header {\n    position: fixed;\n    height: 62px;\n    top: 0;\n    left: 0;\n    width: 100%;\n    padding: 0 5vw;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    background: white;\n    z-index: 100;\n    box-shadow: 0 -0.4rem 0.9rem 0.2rem rgba(0, 0, 0, 0.5);\n    background-color: #37474f;\n  }\n  #app-page .page_header a {\n    text-decoration: none;\n    cursor: pointer;\n    color: #f6f6f6;\n    font-size: 15px;\n    font-weight: 500;\n  }\n  .menu_ul {\n    width: 300px;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n  }\n</style>\n\n<div id=\"app-page\">\n  <div class=\"page_header\">\n    <a href=\"/\" use:link rel=\"prefetch\" style=\"font-size: 50px;\">UnboxAI</a>\n    \n    <!-- <ul class=\"menu_ul\">\n      <li>\n        <a target=\"_blank\" href=\"/dt/index.html\">决策树</a>\n      </li>\n      <li>\n        <a target=\"_blank\" href=\"/dist/indexnn.html\">神经网络</a>\n      </li>\n      <li>\n        <a target=\"_blank\" href=\"/\">KNN</a>\n      </li>\n      <li>\n        <a href=\"/cnn\" use:link rel=\"prefetch\">卷积神经网络</a>\n      </li>\n    </ul> -->\n  </div>\n\n  <div class=\"content\">\n    <Router {routes} />\n  </div>\n</div>\n\n",
    "<script>\n\timport HyperparameterView from '../detail-view/Hyperparameterview.svelte';\n\n\tlet softmaxEquation = `$$\\\\text{Softmax}(x_{i}) = \\\\frac{\\\\exp(x_i)}{\\\\sum_j \\\\exp(x_j)}$$`;\n\tlet reluEquation = `$$\\\\text{ReLU}(x) = \\\\max(0,x)$$`;\n\n  let currentPlayer;\n</script>\n\n<style>\n\t#description {\n    margin-bottom: 60px;\n    margin-left: auto;\n    margin-right: auto;\n    max-width: 78ch;\n  }\n\n  #description h2 {\n    color: #444;\n    font-size: 40px;\n    font-weight: 450;\n    margin-bottom: 12px;\n    margin-top: 60px;\n  }\n\n  #description h4 {\n    color: #444;\n    font-size: 32px;\n    font-weight: 450;\n    margin-bottom: 8px;\n    margin-top: 44px;\n  }\n\n  #description h6 {\n    color: #444;\n    font-size: 24px;\n    font-weight: 450;\n    margin-bottom: 8px;\n    margin-top: 44px;\n  }\n\n  #description p {\n    margin: 16px 0;\n  }\n\n  #description p img {\n    vertical-align: middle;\n  }\n\n  #description .figure-caption {\n    font-size: 13px;\n    margin-top: 5px;\n  }\n\n  #description ol {\n    margin-left: 40px;\n  }\n\n  #description p, \n  #description div,\n  #description li {\n    color: #555;\n    font-size: 17px;\n    line-height: 1.6;\n  }\n\n  #description small {\n    font-size: 12px;\n  }\n\n  #description ol li img {\n    vertical-align: middle;\n  }\n\n</style>\n\n<body>\n  <div id=\"description\">\n    <h2><strong>什么是卷积神经网络？</strong></h2>\n    <p>\n\t\t在机器学习中，分类器将类别标签分配给数据点。例如，一个 <em>图像分类器</em> 针对图像中存在哪些对象产生类别标签（例如：鸟，飞机）。一个 <em>卷积神经网络</em>，或CNN作简称，是一种非常适合解决这种问题类型的分类器！\n\t </p>\n  \t<p>\n  \t\tCNN是神经网络: 一种用于识别数据模式的算法。通常，神经网络由神经元组成，这些神经元分层组织，每个神经元都有自己可通过学习获的权重和误差。 让我们将CNN进一步分解为更基本的构建：\n  \t</p>\n  \t<ol>\n  \t\t<li><strong>张量：</strong> 可以被认为是一个n维矩阵。在上面的CNN中，张量将是3维的，输出层除外。</li>\n  \t\t<li><strong>神经元：</strong> 可以被看作是发生在多个输入并且产生一个输出的功能。神经元的输出在上面表示为 <span style=\"color:#FF7577;\">红色</span> &rarr; <span style=\"color:#60A7D7;\">蓝色</span> <strong> 蓝色激活图</strong>。</li>\n  \t\t<li><strong>层：</strong> 是简单地用相同的操作的神经元，包括相同超参数的集合。</li>\n  \t\t<li><strong>内核权重和偏差：</strong>虽然对于每个神经元而言都是唯一的， 它们在训练阶段进行了调整，来使分类器适应所提供的问题和数据集。它们在可视化中以 <span style=\"color:#BC8435;\">黄色</span> &rarr; <span style=\"color:#39988F;\">绿色</span> 的发散色标来进行编码。通过单击神经元或将鼠标悬停在 <em>卷积弹性解释视图</em>中的内核/偏差上，可以在 <em>交互式公式视图</em> 中查看特定值。</li>\n  \t\t<li>CNN 传达了一个 <strong>微分函数</strong>，该函数在输出层的可视化中表示为 <strong>类分数</strong>。</li>\n  \t</ol> \n  \t<p>\n  \t\t如果您以前学习过神经网络，那么您可能会觉得这些术语很熟悉。那么，什么使CNN与众不同？CNN利用一种特殊类型的层，恰当地称为卷积层，使它们处于适当的位置以从图像和类似图像的数据中学习。关于图像数据，CNN可以用于许多不同的计算机视觉任务，例如 <a href=\"http://ijcsit.com/docs/Volume%207/vol7issue5/ijcsit20160705014.pdf\" title=\"CNN Applications\">图像处理，分类，分割和对象检测</a>。\n  \t</p>  \n  \t<p>\n  \t\t在CNN Explainer中，您可以看到如何使用简单的CNN进行图像分类。由于网络的简单性，它的性能并不理想，但这没关系！CNN Explainer中使用的网络架构， <a href=\"http://cs231n.stanford.edu/\" title=\"Tiny VGG Net presented by Stanford's CS231n\">Tiny VGG</a>包含了当今最先进的CNN所使用的许多相同的层和操作，但是规模较小。这样，将更容易理解入门。\n      </p>     \n\n      <h2><strong>这个网络的每一层做什么？</strong></h2>\n      <p>\n      让我们遍历网络中的每一层。在阅读时，单击并悬停在上面的可视化中，即可与上面的可视化进行交互。\n      </p>\n      <h4 id='article-input'> <strong>输入层</strong></h4>\n      <p>\n      输入层（最左边的层）代表输入到CNN中的图像。因为我们使用RGB图像作为输入，所以输入层具有三个通道，分别对应于该层中显示的红色，绿色和蓝色通道。单击 <img class=\"is-rounded\" width=\"12%\" height=\"12%\" src=\"PUBLIC_URL/assets/figures/network_details.png\" alt=\"network details icon\"/> 上方的图标以显示详细信息（在此层以及其他层上）。\n      </p>\n      <h4 id='article-convolution'> <strong>卷积层</strong></h4>\n      <p>\n      卷积层是CNN的基础，因为它们包含学习的内核（权重），这些内核提取出可将不同图像彼此区分开的特征-这就是我们想要的分类！与卷积层交互时，您会注意到先前各层与卷积层之间的链接。每个链接代表一个唯一的内核，该内核用于卷积操作以生成当前卷积神经元的输出或激活图。\n      </p>\n  \t<p>\n  \t\t卷积神经元执行具有唯一内核和上一层相应神经元输出的元素点积。这将产生与唯一内核一样多的中间结果。卷积神经元是所有中间结果的总和与学习偏差的总和。\n  \t</p>\n  \t<p>\n      例如，让我们看一下上面的Tiny VGG架构中的第一个卷积层。请注意，此层中有10个神经元，但上一层中只有3个神经元。在Tiny VGG架构中，卷积层是完全连接的，这意味着每个神经元都与上一层中的每个其他神经元相连。着眼于第一卷积层最顶部的卷积神经元的输出，当我们将鼠标悬停在激活图上时，我们将看到有3个唯一的内核。\n  \t</p>\n    <div class=\"figure\">\n      <img src=\"PUBLIC_URL/assets/figures/convlayer_overview_demo.gif\" alt=\"clicking on topmost first conv. layer activation map\" width=60% height=60% align=\"middle\"/>\n      <div class=\"figure-caption\">\n        图1: 将鼠标悬停在第一个卷积层上最顶层节点的激活图上时，您会看到已应用3个内核来生成此激活图。单击此激活图后，您可以看到每个唯一内核发生的卷积操作。\n      </div>\n    </div>\n\n  \t<p>\n      这些内核的大小是由网络体系结构的设计人员指定的超参数。为了产生卷积神经元（激活图）的输出，我们必须与上一层的输出以及网络学习到的唯一内核一起执行元素逐点积。在TinyVGG中，点积运算使用的跨度为1，这意味着内核将每个点积移出1个像素，但这是网络架构设计人员可以调整以使其更适合其数据集的超参数。我们必须对所有3个内核执行此操作，这将产生3个中间结果。\n  \t</p>\n    <div class=\"figure\">\n      <img src=\"PUBLIC_URL/assets/figures/convlayer_detailedview_demo.gif\" alt=\"clicking on topmost first conv. layer activation map\" />\n      <div class=\"figure-caption\">\n        图2:内核用于生成上述激活图的最高中间结果。\n      </div>\n    </div>\n  \t<p>\n  \t\t然后，执行元素和，包含所有3个中间结果以及网络已获悉的偏差。此后，生成的二维张量将是在第一卷积层中最顶层神经元的上方界面上可见的激活图。必须应用相同的操作来生成每个神经元的激活图。\n  \t</p>\n  \t<p>\n      通过一些简单的数学运算，我们可以推断出在第一个卷积层中应用了3 x 10 = 30个唯一的内核，每个内核的大小为3x3。卷积层与上一层之间的连通性是构建网络体系结构时的设计决策，它将影响每个卷积层的内核数量。单击可视化文件以更好地了解卷积层背后的操作。看看你是否可以理解上面的示例！\n    </p>\n    \n    <h4><strong>激活层函数</strong></h4>\n    <h6 id='article-relu'><strong>ReLU函数</strong></h6>\n    <p>\n      神经网络在现代技术中极为盛行-因为它们是如此的精确！当今性能最高的CNN包含大量荒谬的图层，可以学习越来越多的功能。这些突破性的CNN能够实现如此 <a href=\"https://arxiv.org/pdf/1512.03385.pdf\" title=\"ResNet\">强大的准确性</a> 是因为它们的非线性。  ReLU将急需的非线性应用到模型中。非线性是产生非线性决策边界所必需的，因此输出不能写成输入的线性组合。与其他非线性函数（例如Sigmoid）相反，ReLU激活函数专门用作非线性激活函数，因为从经验上已经观察到，使用ReLU的CNN的训练速度要快于它们的对应函数。\n    </p>\n    <p>\n      ReLU激活函数是一对一的数学运算\n    </p>\n    <div class=\"figure\">\n    <img src=\"PUBLIC_URL/assets/figures/relu_graph.svg\" alt=\"relu graph\" width=\"30%\" height=\"30%\"/>\n      <div class=\"figure-caption\">\n        图3: 绘制的ReLU激活函数，该函数忽略了所有负面数据。\n      </div>\n    </div>\n    \n    <h6 id='article-softmax'><strong>Softmax函数</strong></h6>\n    <p>\n      softmax操作的主要作用是：确保CNN输出总和为1。因此，softmax操作可用于将模型输出缩放为概率。单击最后一层将显示网络中的softmax操作。通过softmax函数后，每个类现在对应一个适当的概率！\n    </p>\n    <div class=\"figure\">\n    <img src=\"PUBLIC_URL/assets/figures/softmax_animation.gif\" alt=\"softmax interactive formula view\"/>\n      <div class=\"figure-caption\">\n        图4：Softmax交互式公式视图允许用户与颜色编码的logit和公式进行交互，以了解在将扁平层之后的预测分数如何归一化以产生分类分数。</div>\n    </div>\n    <h4 id='article-pooling'><strong>池化层</strong></h4>\n    <p>\n      在不同的CNN架构中，池化层的类型很多，但是它们的目的都是要逐渐减小网络的空间范围，从而减少网络的参数和总体计算。上面的Tiny VGG架构中使用的池类型为Max-Pooling。\n    </p>\n    <p>\n      最大池操作需要在体系结构设计期间选择内核大小和步幅长度。选择后，该操作将以指定的步幅在输入上滑动内核，同时仅从输入中选择每个内核切片上的最大值以产生输出值。通过单击上方网络中的合并神经元，可以查看此过程。\n    </p>\n    <p>\n      在上面的Tiny VGG体系结构中，池化层使用的是2x2内核，步幅为2。使用这些规范进行此操作将导致75％的激活被丢弃。通过丢弃这么多值，Tiny VGG的计算效率更高，并且避免了过拟合。\n    </p>\n    <h4 id='article-flatten'><strong>展平层</strong></h4>\n    <p>      \n      该层将网络中的三维层转换为一维向量，以适合全连接层的输入以进行分类。例如，将一个5x5x2张量转换为大小为50的向量。网络的先前卷积层从输入图像中提取了特征，但是现在该对这些特征进行分类了。我们使用softmax函数对这些功能进行分类，这需要一维输入。这就是为什么需要平坦层的原因。可以通过单击任何输出类来查看此层。\n    </p>\n\n    <h2><strong>互动功能</strong></h2>\n    <ol>\n    \t<li><strong>上传自己的图像：</strong> 通过选择 <img class=\"icon is-rounded\" src=\"PUBLIC_URL/assets/figures/upload_image_icon.png\" alt=\"upload image icon\"/> 了解您的图像如何分为10类。通过分析整个网络中的神经元，您可以了解激活图和提取的特征。</li>\n    \t<li><strong>更改激活图色标：</strong> to better understand the impact of activations at different levels of abstraction by adjusting <img class=\"is-rounded\" width=\"12%\" height=\"12%\" src=\"PUBLIC_URL/assets/figures/heatmap_scale.png\" alt=\"heatmap\"/>.</li>\n    \t<li><strong>了解网络详细信息：</strong> 单击 <img class=\"is-rounded\" width=\"12%\" height=\"12%\" src=\"PUBLIC_URL/assets/figures/network_details.png\" alt=\"network details icon\"/> 图标，来进一步了解图层尺寸和色标。 </li>\n    \t<li><strong>模拟网络操作：</strong> 通过点击 <img class=\"icon is-rounded\" src=\"PUBLIC_URL/assets/figures/play_button.png\" alt=\"play icon\"/> 按钮，或通过将鼠标悬停在输入或输出的各个部分上 <em>交互式公式窗口</em> 来了解映射和基础操作</li>\n      <li><strong>了解图层功能：</strong> 通过单击 <img class=\"icon is-rounded\" src=\"PUBLIC_URL/assets/figures/info_button.png\" alt=\"info icon\"/> 按钮，并从 <em>交互式公式窗口</em> 了解层的详细信息。</li>\n    </ol> \n\n  </div>\n</body>",
    "<script>\n\timport HyperparameterView from '../detail-view/Hyperparameterview.svelte';\n\n\tlet softmaxEquation = `$$\\\\text{Softmax}(x_{i}) = \\\\frac{\\\\exp(x_i)}{\\\\sum_j \\\\exp(x_j)}$$`;\n\tlet reluEquation = `$$\\\\text{ReLU}(x) = \\\\max(0,x)$$`;\n\n  let currentPlayer;\n</script>\n\n<style>\n\t#description {\n    margin-bottom: 60px;\n    margin-left: auto;\n    margin-right: auto;\n    max-width: 78ch;\n  }\n\n  #description h2 {\n    color: #444;\n    font-size: 40px;\n    font-weight: 450;\n    margin-bottom: 12px;\n    margin-top: 60px;\n  }\n\n  #description h4 {\n    color: #444;\n    font-size: 32px;\n    font-weight: 450;\n    margin-bottom: 8px;\n    margin-top: 44px;\n  }\n\n  #description h6 {\n    color: #444;\n    font-size: 24px;\n    font-weight: 450;\n    margin-bottom: 8px;\n    margin-top: 44px;\n  }\n\n  #description p {\n    margin: 16px 0;\n  }\n\n  #description p img {\n    vertical-align: middle;\n  }\n\n  #description .figure-caption {\n    font-size: 13px;\n    margin-top: 5px;\n  }\n\n  #description ol {\n    margin-left: 40px;\n  }\n\n  #description p, \n  #description div,\n  #description li {\n    color: #555;\n    font-size: 17px;\n    line-height: 1.6;\n  }\n\n  #description small {\n    font-size: 12px;\n  }\n\n  #description ol li img {\n    vertical-align: middle;\n  }\n\n</style>\n\n<body>\n  <div id=\"description\">\n    <h2><strong>什么是卷积神经网络？</strong></h2>\n    <p>\n\t\t在机器学习中，分类器将类别标签分配给数据点。例如，一个 <em>图像分类器</em> 针对图像中存在哪些对象产生类别标签（例如：鸟，飞机）。一个 <em>卷积神经网络</em>，或CNN作简称，是一种非常适合解决这种问题类型的分类器！\n\t </p>\n  \t<p>\n  \t\tCNN是神经网络: 一种用于识别数据模式的算法。通常，神经网络由神经元组成，这些神经元分层组织，每个神经元都有自己可通过学习获的权重和误差。 让我们将CNN进一步分解为更基本的构建：\n  \t</p>\n  \t<ol>\n  \t\t<li><strong>张量：</strong> 可以被认为是一个n维矩阵。在上面的CNN中，张量将是3维的，输出层除外。</li>\n  \t\t<li><strong>神经元：</strong> 可以被看作是发生在多个输入并且产生一个输出的功能。神经元的输出在上面表示为 <span style=\"color:#FF7577;\">红色</span> &rarr; <span style=\"color:#60A7D7;\">蓝色</span> <strong> 蓝色激活图</strong>。</li>\n  \t\t<li><strong>层：</strong> 是简单地用相同的操作的神经元，包括相同超参数的集合。</li>\n  \t\t<li><strong>内核权重和偏差：</strong>虽然对于每个神经元而言都是唯一的， 它们在训练阶段进行了调整，来使分类器适应所提供的问题和数据集。它们在可视化中以 <span style=\"color:#BC8435;\">黄色</span> &rarr; <span style=\"color:#39988F;\">绿色</span> 的发散色标来进行编码。通过单击神经元或将鼠标悬停在 <em>卷积弹性解释视图</em>中的内核/偏差上，可以在 <em>交互式公式视图</em> 中查看特定值。</li>\n  \t\t<li>CNN 传达了一个 <strong>微分函数</strong>，该函数在输出层的可视化中表示为 <strong>类分数</strong>。</li>\n  \t</ol> \n  \t<p>\n  \t\t如果您以前学习过神经网络，那么您可能会觉得这些术语很熟悉。那么，什么使CNN与众不同？CNN利用一种特殊类型的层，恰当地称为卷积层，使它们处于适当的位置以从图像和类似图像的数据中学习。关于图像数据，CNN可以用于许多不同的计算机视觉任务，例如 <a href=\"http://ijcsit.com/docs/Volume%207/vol7issue5/ijcsit20160705014.pdf\" title=\"CNN Applications\">图像处理，分类，分割和对象检测</a>。\n  \t</p>  \n  \t<p>\n  \t\t在CNN Explainer中，您可以看到如何使用简单的CNN进行图像分类。由于网络的简单性，它的性能并不理想，但这没关系！CNN Explainer中使用的网络架构， <a href=\"http://cs231n.stanford.edu/\" title=\"Tiny VGG Net presented by Stanford's CS231n\">Tiny VGG</a>包含了当今最先进的CNN所使用的许多相同的层和操作，但是规模较小。这样，将更容易理解入门。\n      </p>     \n\n      <h2><strong>这个网络的每一层做什么？</strong></h2>\n      <p>\n      让我们遍历网络中的每一层。在阅读时，单击并悬停在上面的可视化中，即可与上面的可视化进行交互。\n      </p>\n      <h4 id='article-input'> <strong>输入层</strong></h4>\n      <p>\n      输入层（最左边的层）代表输入到CNN中的图像。因为我们使用RGB图像作为输入，所以输入层具有三个通道，分别对应于该层中显示的红色，绿色和蓝色通道。单击 <img class=\"is-rounded\" width=\"12%\" height=\"12%\" src=\"PUBLIC_URL/assets/figures/network_details.png\" alt=\"network details icon\"/> 上方的图标以显示详细信息（在此层以及其他层上）。\n      </p>\n      <h4 id='article-convolution'> <strong>卷积层</strong></h4>\n      <p>\n      卷积层是CNN的基础，因为它们包含学习的内核（权重），这些内核提取出可将不同图像彼此区分开的特征-这就是我们想要的分类！与卷积层交互时，您会注意到先前各层与卷积层之间的链接。每个链接代表一个唯一的内核，该内核用于卷积操作以生成当前卷积神经元的输出或激活图。\n      </p>\n  \t<p>\n  \t\t卷积神经元执行具有唯一内核和上一层相应神经元输出的元素点积。这将产生与唯一内核一样多的中间结果。卷积神经元是所有中间结果的总和与学习偏差的总和。\n  \t</p>\n  \t<p>\n      例如，让我们看一下上面的Tiny VGG架构中的第一个卷积层。请注意，此层中有10个神经元，但上一层中只有3个神经元。在Tiny VGG架构中，卷积层是完全连接的，这意味着每个神经元都与上一层中的每个其他神经元相连。着眼于第一卷积层最顶部的卷积神经元的输出，当我们将鼠标悬停在激活图上时，我们将看到有3个唯一的内核。\n  \t</p>\n    <div class=\"figure\">\n      <img src=\"PUBLIC_URL/assets/figures/convlayer_overview_demo.gif\" alt=\"clicking on topmost first conv. layer activation map\" width=60% height=60% align=\"middle\"/>\n      <div class=\"figure-caption\">\n        图1: 将鼠标悬停在第一个卷积层上最顶层节点的激活图上时，您会看到已应用3个内核来生成此激活图。单击此激活图后，您可以看到每个唯一内核发生的卷积操作。\n      </div>\n    </div>\n\n  \t<p>\n      这些内核的大小是由网络体系结构的设计人员指定的超参数。为了产生卷积神经元（激活图）的输出，我们必须与上一层的输出以及网络学习到的唯一内核一起执行元素逐点积。在TinyVGG中，点积运算使用的跨度为1，这意味着内核将每个点积移出1个像素，但这是网络架构设计人员可以调整以使其更适合其数据集的超参数。我们必须对所有3个内核执行此操作，这将产生3个中间结果。\n  \t</p>\n    <div class=\"figure\">\n      <img src=\"PUBLIC_URL/assets/figures/convlayer_detailedview_demo.gif\" alt=\"clicking on topmost first conv. layer activation map\" />\n      <div class=\"figure-caption\">\n        图2:内核用于生成上述激活图的最高中间结果。\n      </div>\n    </div>\n  \t<p>\n  \t\t然后，执行元素和，包含所有3个中间结果以及网络已获悉的偏差。此后，生成的二维张量将是在第一卷积层中最顶层神经元的上方界面上可见的激活图。必须应用相同的操作来生成每个神经元的激活图。\n  \t</p>\n  \t<p>\n      通过一些简单的数学运算，我们可以推断出在第一个卷积层中应用了3 x 10 = 30个唯一的内核，每个内核的大小为3x3。卷积层与上一层之间的连通性是构建网络体系结构时的设计决策，它将影响每个卷积层的内核数量。单击可视化文件以更好地了解卷积层背后的操作。看看你是否可以理解上面的示例！\n    </p>\n    \n    <h4><strong>激活层函数</strong></h4>\n    <h6 id='article-relu'><strong>ReLU函数</strong></h6>\n    <p>\n      神经网络在现代技术中极为盛行-因为它们是如此的精确！当今性能最高的CNN包含大量荒谬的图层，可以学习越来越多的功能。这些突破性的CNN能够实现如此 <a href=\"https://arxiv.org/pdf/1512.03385.pdf\" title=\"ResNet\">强大的准确性</a> 是因为它们的非线性。  ReLU将急需的非线性应用到模型中。非线性是产生非线性决策边界所必需的，因此输出不能写成输入的线性组合。与其他非线性函数（例如Sigmoid）相反，ReLU激活函数专门用作非线性激活函数，因为从经验上已经观察到，使用ReLU的CNN的训练速度要快于它们的对应函数。\n    </p>\n    <p>\n      ReLU激活函数是一对一的数学运算\n    </p>\n    <div class=\"figure\">\n    <img src=\"PUBLIC_URL/assets/figures/relu_graph.svg\" alt=\"relu graph\" width=\"30%\" height=\"30%\"/>\n      <div class=\"figure-caption\">\n        图3: 绘制的ReLU激活函数，该函数忽略了所有负面数据。\n      </div>\n    </div>\n    \n    <h6 id='article-softmax'><strong>Softmax函数</strong></h6>\n    <p>\n      softmax操作的主要作用是：确保CNN输出总和为1。因此，softmax操作可用于将模型输出缩放为概率。单击最后一层将显示网络中的softmax操作。通过softmax函数后，每个类现在对应一个适当的概率！\n    </p>\n    <div class=\"figure\">\n    <img src=\"PUBLIC_URL/assets/figures/softmax_animation.gif\" alt=\"softmax interactive formula view\"/>\n      <div class=\"figure-caption\">\n        图4：Softmax交互式公式视图允许用户与颜色编码的logit和公式进行交互，以了解在将扁平层之后的预测分数如何归一化以产生分类分数。</div>\n    </div>\n    <h4 id='article-pooling'><strong>池化层</strong></h4>\n    <p>\n      在不同的CNN架构中，池化层的类型很多，但是它们的目的都是要逐渐减小网络的空间范围，从而减少网络的参数和总体计算。上面的Tiny VGG架构中使用的池类型为Max-Pooling。\n    </p>\n    <p>\n      最大池操作需要在体系结构设计期间选择内核大小和步幅长度。选择后，该操作将以指定的步幅在输入上滑动内核，同时仅从输入中选择每个内核切片上的最大值以产生输出值。通过单击上方网络中的合并神经元，可以查看此过程。\n    </p>\n    <p>\n      在上面的Tiny VGG体系结构中，池化层使用的是2x2内核，步幅为2。使用这些规范进行此操作将导致75％的激活被丢弃。通过丢弃这么多值，Tiny VGG的计算效率更高，并且避免了过拟合。\n    </p>\n    <h4 id='article-flatten'><strong>展平层</strong></h4>\n    <p>      \n      该层将网络中的三维层转换为一维向量，以适合全连接层的输入以进行分类。例如，将一个5x5x2张量转换为大小为50的向量。网络的先前卷积层从输入图像中提取了特征，但是现在该对这些特征进行分类了。我们使用softmax函数对这些功能进行分类，这需要一维输入。这就是为什么需要平坦层的原因。可以通过单击任何输出类来查看此层。\n    </p>\n\n    <h2><strong>互动功能</strong></h2>\n    <ol>\n    \t<li><strong>上传自己的图像：</strong> 通过选择 <img class=\"icon is-rounded\" src=\"PUBLIC_URL/assets/figures/upload_image_icon.png\" alt=\"upload image icon\"/> 了解您的图像如何分为10类。通过分析整个网络中的神经元，您可以了解激活图和提取的特征。</li>\n    \t<li><strong>更改激活图色标：</strong> to better understand the impact of activations at different levels of abstraction by adjusting <img class=\"is-rounded\" width=\"12%\" height=\"12%\" src=\"PUBLIC_URL/assets/figures/heatmap_scale.png\" alt=\"heatmap\"/>.</li>\n    \t<li><strong>了解网络详细信息：</strong> 单击 <img class=\"is-rounded\" width=\"12%\" height=\"12%\" src=\"PUBLIC_URL/assets/figures/network_details.png\" alt=\"network details icon\"/> 图标，来进一步了解图层尺寸和色标。 </li>\n    \t<li><strong>模拟网络操作：</strong> 通过点击 <img class=\"icon is-rounded\" src=\"PUBLIC_URL/assets/figures/play_button.png\" alt=\"play icon\"/> 按钮，或通过将鼠标悬停在输入或输出的各个部分上 <em>交互式公式窗口</em> 来了解映射和基础操作</li>\n      <li><strong>了解图层功能：</strong> 通过单击 <img class=\"icon is-rounded\" src=\"PUBLIC_URL/assets/figures/info_button.png\" alt=\"info icon\"/> 按钮，并从 <em>交互式公式窗口</em> 了解层的详细信息。</li>\n    </ol> \n\n  </div>\n</body>",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n  import { array1d, getMatrixSliceFromOutputHighlights,\n    getVisualizationSizeConstraint, getMatrixSliceFromInputHighlights, gridData\n  } from './DetailviewUtils.js';\n  import Dataview from './Dataview.svelte';\n\n  export let image;\n  export let output;\n  export let isPaused;\n  export let dataRange;\n\n  const dispatch = createEventDispatcher();\n  const padding = 0;\n  let padded_input_size = image.length + padding * 2;\n  $: padded_input_size = image.length + padding * 2;\n\n  let gridInputMatrixSlice = gridData([[0]]);\n  let gridOutputMatrixSlice = gridData([[0]]);\n  let inputHighlights = array1d(image.length * image.length, (i) => true);\n  let outputHighlights = array1d(output.length * output.length, (i) => true);\n  let interval;\n  $ : {\n    let inputHighlights = array1d(image.length * image.length, (i) => true);\n    let outputHighlights = array1d(output.length * output.length, (i) => true);\n    let interval;\n  }\n\n  let counter;\n\n  // lots of replication between mouseover and start-relu. TODO: fix this.\n  function startRelu() {\n    counter = 0;\n    if (interval) clearInterval(interval);\n    interval = setInterval(() => {\n      if (isPaused) return;\n      const flat_animated = counter % (output.length * output.length);\n      outputHighlights = array1d(output.length * output.length, (i) => false);\n      inputHighlights = array1d(image.length * image.length, (i) => undefined);\n      const animatedH = Math.floor(flat_animated / output.length);\n      const animatedW = flat_animated % output.length;\n      outputHighlights[animatedH * output.length + animatedW] = true;\n      inputHighlights[animatedH * output.length + animatedW] = true;\n      const inputMatrixSlice = getMatrixSliceFromInputHighlights(image, inputHighlights, 1);\n      gridInputMatrixSlice = gridData(inputMatrixSlice);\n      const outputMatrixSlice = getMatrixSliceFromOutputHighlights(output, outputHighlights);\n      gridOutputMatrixSlice = gridData(outputMatrixSlice);\n      counter++;\n    }, 250)\n  }\n\n  function handleMouseover(event) {\n    outputHighlights = array1d(output.length * output.length, (i) => false);\n    const animatedH = event.detail.hoverH;\n    const animatedW = event.detail.hoverW;\n    outputHighlights[animatedH * output.length + animatedW] = true;\n    inputHighlights = array1d(image.length * image.length, (i) => undefined);\n    inputHighlights[animatedH * output.length + animatedW] = true;\n    const inputMatrixSlice = getMatrixSliceFromInputHighlights(image, inputHighlights, 1);\n    gridInputMatrixSlice = gridData(inputMatrixSlice);\n    const outputMatrixSlice = getMatrixSliceFromOutputHighlights(output, outputHighlights);\n    gridOutputMatrixSlice = gridData(outputMatrixSlice);\n    isPaused = true;\n    dispatch('message', {\n      text: isPaused\n    });\n  }\n\n  startRelu();\n  let gridImage = gridData(image)\n  let gridOutput = gridData(output)\n  $ : {\n    startRelu();\n    gridImage = gridData(image)\n    gridOutput = gridData(output)\n  }\n</script>\n\n<style>\n  .column {\n    padding: 5px;\n  }\n</style>\n\n<div class=\"column has-text-centered\">\n  <div class=\"header-text\">\n    Input ({image.length}, {image[0].length})\n  </div>\n  <Dataview on:message={handleMouseover} data={gridImage} highlights={inputHighlights} outputLength={output.length}\n      isKernelMath={false} constraint={getVisualizationSizeConstraint(image.length)} dataRange={dataRange} stride={1}/>  \n</div>\n<div class=\"column has-text-centered\">\n  <span>\n    max(\n    <Dataview data={gridData([[0]])} highlights={outputHighlights} isKernelMath={true} \n    constraint={20} dataRange={dataRange}/>\n    ,\n    <Dataview data={gridInputMatrixSlice} highlights={outputHighlights} isKernelMath={true} \n    constraint={20} dataRange={dataRange}/>\n    )\n    =\n    <Dataview data={gridOutputMatrixSlice} highlights={outputHighlights} isKernelMath={true} \n      constraint={20} dataRange={dataRange}/>\n  </span> \n</div>\n<div class=\"column has-text-centered\">\n  <div class=\"header-text\">\n    Output ({output.length}, {output[0].length})\n  </div>\n  <Dataview on:message={handleMouseover} data={gridOutput} highlights={outputHighlights} isKernelMath={false} \n      outputLength={output.length} constraint={getVisualizationSizeConstraint(output.length)} dataRange={dataRange} stride={1}/>\n</div>",
    "<script>\n\timport ActivationAnimator from './ActivationAnimator.svelte';\n  import { createEventDispatcher } from 'svelte';\n\n  export let input;\n  export let output;\n  export let dataRange;\n  export let isExited;\n\n  const dispatch = createEventDispatcher();\n  let isPaused = false;\n  \n  function handleClickPause() {\n    isPaused = !isPaused;\n  }\n\n  function handlePauseFromInteraction(event) {\n    isPaused = event.detail.text;\n  }\n\n  function handleClickX() {\n    dispatch('message', {\n      text: true\n    });\n  }\n\n  function handleScroll() {\n    let svgHeight = Number(d3.select('#cnn-svg').style('height').replace('px', '')) + 150;\n    let scroll = new SmoothScroll('a[href*=\"#\"]', {offset: -svgHeight});\n    let anchor = document.querySelector(`#article-relu`);\n    scroll.animateScroll(anchor);\n  }\n</script>\n\n<style>\n  .control-pannel {\n    display: flex;\n    position: relative;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  .buttons {\n    cursor: pointer;\n    position: absolute;\n    top: 0px;\n    right: 0px;\n  }\n\n  .control-button {\n    color: gray;\n    font-size: 15px;\n    opacity: 0.4;\n    cursor: pointer;\n  }\n\n  .control-button:not(:first-child) {\n    margin-left: 5px;\n  }\n\n  .annotation {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding-left : 10px;\n    font-size: 12px;\n  }\n\n  .annotation > img {\n    width: 17px;\n    margin-right: 5px;\n  }\n\n  .control-button:hover {\n    opacity: 0.8;\n  }\n\n  .box {\n    padding: 5px 15px 10px 15px;\n  }\n\n  .container {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n\n  .title-text {\n    font-size: 1.2em;\n    font-weight: 500;\n    color: #4a4a4a;\n  }\n</style>\n\n{#if !isExited}\n  <div class=\"container\">\n    <div class=\"box\">\n\n      <div class=\"control-pannel\">\n\n        <div class=\"title-text\">\n          ReLU Activation\n        </div>\n\n        <div class=\"buttons\">\n\n          <div class=\"control-button\" on:click={handleScroll} title=\"Jump to article section\">\n            <i class=\"fas fa-info-circle\"></i>\n          </div>\n\n          <div class=\"play-button control-button\" on:click={handleClickPause} title=\"Play animation\">\n            {@html isPaused ?\n              '<i class=\"fas fa-play-circle play-icon\"></i>' :\n              '<i class=\"fas fa-pause-circle\"></i>'}\n          </div>\n\n          <div class=\"delete-button control-button\" on:click={handleClickX} title=\"Close\">\n              <i class=\"fas control-icon fa-times-circle\"></i>\n          </div>\n        </div>\n\n      </div>\n\n      <div class=\"container is-centered is-vcentered\">\n        <ActivationAnimator on:message={handlePauseFromInteraction} \n          image={input} output={output} isPaused={isPaused}\n          dataRange={dataRange}/>\n      </div>\n\n      <div class=\"annotation\">\n        <img src='PUBLIC_URL/assets/img/pointer.svg' alt='pointer icon'>\n        <div class=\"annotation-text\">\n          <span style=\"font-weight:600\">Hover over</span> the matrices to change pixel.\n        </div>\n      </div>\n\n    </div>\n  </div>\n{/if}",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n  import { array1d, getMatrixSliceFromOutputHighlights,\n    compute_input_multiplies_with_weight, getDataRange,\n    getVisualizationSizeConstraint, generateOutputMappings,\n    getMatrixSliceFromInputHighlights, gridData\n  } from './DetailviewUtils.js';\n  import Dataview from './Dataview.svelte';\n  import KernelMathView from './KernelMathView.svelte';\n  // image: nxn array -- prepadded.\n  // kernel: mxm array.\n  // stride: int\n  export let stride;\n  export let dilation\n  export let kernel;\n  export let image;\n  export let output;\n  export let isPaused;\n  export let dataRange;\n  export let colorScale;\n  export let isInputInputLayer = false;\n\n  const dispatch = createEventDispatcher();\n  const padding = 0;\n  let padded_input_size = image.length + padding * 2;\n  $: padded_input_size = image.length + padding * 2;\n\n  // Dummy data for original state of component.\n  let testInputMatrixSlice = [];\n  for (let i = 0; i < kernel.length; i++) {\n    testInputMatrixSlice.push([]);\n    for (let j = 0; j < kernel.length; j++) {\n      testInputMatrixSlice[i].push(0)\n    }\n  }\n  testInputMatrixSlice = gridData(testInputMatrixSlice)\n  let testOutputMatrixSlice = gridData([0]);\n\n  let inputHighlights = [];\n  let outputHighlights = array1d(output.length * output.length, (i) => true);\n  let interval;\n  $ : {\n    let inputHighlights = [];\n    let outputHighlights = array1d(output.length * output.length, (i) => true);\n    let interval;\n  }\n\n  let counter;\n  // lots of replication between mouseover and start-conv. TODO: fix this.\n  function startConvolution(stride) {\n    counter = 0;\n    let outputMappings = generateOutputMappings(stride, output, kernel.length, padded_input_size, dilation);\n    if (stride <= 0) return;\n    if (interval) clearInterval(interval);\n    interval = setInterval(() => {\n      if (isPaused) return;\n      const flat_animated = counter % (output.length * output.length);\n      outputHighlights = array1d(output.length * output.length, (i) => false);\n      const animatedH = Math.floor(flat_animated / output.length);\n      const animatedW = flat_animated % output.length;\n      outputHighlights[animatedH * output.length + animatedW] = true;\n      inputHighlights = compute_input_multiplies_with_weight(animatedH, animatedW, padded_input_size, kernel.length, outputMappings, kernel.length)\n      const inputMatrixSlice = getMatrixSliceFromInputHighlights(image, inputHighlights, kernel.length);\n      testInputMatrixSlice = gridData(inputMatrixSlice);\n      const outputMatrixSlice = getMatrixSliceFromOutputHighlights(output, outputHighlights);\n      testOutputMatrixSlice = gridData(outputMatrixSlice);\n      counter++;\n    }, 250)\n  }\n\n  function handleMouseover(event) {\n    let outputMappings = generateOutputMappings(stride, output, kernel.length, padded_input_size, dilation);\n    outputHighlights = array1d(output.length * output.length, (i) => false);\n    const animatedH = event.detail.hoverH;\n    const animatedW = event.detail.hoverW;\n    outputHighlights[animatedH * output.length + animatedW] = true;\n    inputHighlights = compute_input_multiplies_with_weight(animatedH, animatedW, padded_input_size, kernel.length, outputMappings, kernel.length)\n    const inputMatrixSlice = getMatrixSliceFromInputHighlights(image, inputHighlights, kernel.length);\n    testInputMatrixSlice = gridData(inputMatrixSlice);\n    const outputMatrixSlice = getMatrixSliceFromOutputHighlights(output, outputHighlights);\n    testOutputMatrixSlice = gridData(outputMatrixSlice);\n    isPaused = true;\n    dispatch('message', {\n      text: isPaused\n    });\n  }\n\n  startConvolution(stride);\n  let testImage = gridData(image)\n  let testOutput = gridData(output)\n  let testKernel = gridData(kernel)\n  $ : {\n    startConvolution(stride);\n    testImage = gridData(image)\n    testOutput = gridData(output)\n    testKernel = gridData(kernel)\n  }\n</script>\n\n<style>\n  .column {\n    padding: 5px;\n  }\n</style>\n\n<div class=\"column has-text-centered\">\n  <div class=\"header-text\">\n    输入 ({image.length}, {image[0].length})\n  </div>\n  <Dataview on:message={handleMouseover} data={testImage} highlights={inputHighlights} outputLength={output.length}\n      isKernelMath={false} constraint={getVisualizationSizeConstraint(image.length)}\n      dataRange={dataRange} stride={stride} colorScale={colorScale}\n      isInputLayer={isInputInputLayer}/>\n</div>\n<div class=\"column has-text-centered\">\n  <KernelMathView data={testInputMatrixSlice} kernel={testKernel} constraint={getVisualizationSizeConstraint(kernel.length)}\n                  dataRange={dataRange} kernelRange={getDataRange(kernel)} colorScale={colorScale}\n                  isInputLayer={isInputInputLayer}/>\n  <Dataview data={testOutputMatrixSlice} highlights={outputHighlights} isKernelMath={true} \n      constraint={getVisualizationSizeConstraint(kernel.length)} dataRange={dataRange}/>\n</div>\n<div class=\"column has-text-centered\">\n  <div class=\"header-text\">\n    输出 ({output.length}, {output[0].length})\n  </div>\n  <Dataview on:message={handleMouseover} data={testOutput} highlights={outputHighlights} isKernelMath={false}\n      outputLength={output.length} constraint={getVisualizationSizeConstraint(output.length)} dataRange={dataRange} stride={stride}/>\n</div>",
    "<script>\n\timport ConvolutionAnimator from './ConvolutionAnimator.svelte';\n  import { singleConv } from '../utils/cnn.js';\n  import { createEventDispatcher } from 'svelte';\n\n  export let input;\n  export let kernel;\n  export let dataRange;\n  export let colorScale = d3.interpolateRdBu;\n  export let isInputInputLayer = false;\n  export let isExited = false;\n  // export let output;\n  \n  const dispatch = createEventDispatcher();\n\tlet stride = 1;\n  const dilation = 1;\n  var isPaused = false;\n  var outputFinal = singleConv(input, kernel, stride);\n  $: if (stride > 0) {\n    try { \n      outputFinal = singleConv(input, kernel, stride);\n    } catch {\n      console.log(\"Cannot handle stride of \" + stride);\n    }\n  }\n  \n  function handleClickPause() {\n    isPaused = !isPaused;\n  }\n\n  function handleScroll() {\n    let svgHeight = Number(d3.select('#cnn-svg').style('height').replace('px', '')) + 150;\n    let scroll = new SmoothScroll('a[href*=\"#\"]', {offset: -svgHeight});\n    let anchor = document.querySelector(`#article-convolution`);\n    scroll.animateScroll(anchor);\n  }\n\n  function handlePauseFromInteraction(event) {\n    isPaused = event.detail.text;\n  }\n\n  function handleClickX() {\n    isExited = true;\n    dispatch('message', {\n      text: isExited\n    });\n  }\n</script>\n\n<style>\n  .control-pannel {\n    display: flex;\n    position: relative;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  .buttons {\n    cursor: pointer;\n    position: absolute;\n    top: 0px;\n    right: 0px;\n  }\n\n  .control-button {\n    color: gray;\n    font-size: 15px;\n    opacity: 0.4;\n    cursor: pointer;\n  }\n\n  .control-button:not(:first-child) {\n    margin-left: 5px;\n  }\n\n  .annotation {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding-left : 10px;\n    font-size: 12px;\n  }\n\n  .annotation > img {\n    width: 17px;\n    margin-right: 5px;\n  }\n\n  .control-button:hover {\n    opacity: 0.8;\n  }\n\n  .box {\n    padding: 5px 15px 10px 15px;\n  }\n\n  .container {\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-end;\n  }\n\n  .title-text {\n    font-size: 1.2em;\n    font-weight: 500;\n    color: #4a4a4a;\n  }\n</style>\n\n{#if !isExited}\n  <div class=\"container\" id=\"detailview-container\">\n\n    <!-- old stride input -->\n    <!-- <div class=\"columns is-mobile\">\n      <div class=\"column is-half is-offset-one-quarter\">\n        <div class=\"field is-grouped\">\n          <p class=\"control is-expanded\">\n            <input class=\"input\" type=\"text\" placeholder=\"Stride\" bind:value={stride} />\n          </p>\n          <p class=\"control\">\n            <button class=\"button is-success\" on:click={handleClickPause}>\n              Toggle Movement\n            </button>\n          </p>\n        </div>\n      </div>\n    </div> -->\n\n    <div class=\"box\">\n\n      <div class=\"control-pannel\">\n\n        <div class=\"title-text\">\n          卷积过程\n        </div>\n\n        <div class=\"buttons\">\n          <div class=\"control-button\" on:click={handleScroll} title=\"Jump to article section\">\n            <i class=\"fas fa-info-circle\"></i>\n          </div>\n\n          <div class=\"play-button control-button\" on:click={handleClickPause} title=\"Play animation\">\n            {@html isPaused ?\n              '<i class=\"fas fa-play-circle play-icon\"></i>' :\n              '<i class=\"fas fa-pause-circle\"></i>'}\n          </div>\n\n          <div class=\"delete-button control-button\" on:click={handleClickX} title=\"Close\">\n            <i class=\"fas control-icon fa-times-circle\"></i>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"container is-centered\">\n        <ConvolutionAnimator on:message={handlePauseFromInteraction} \n          kernel={kernel} image={input} output={outputFinal} \n          stride={stride} dilation={dilation} isPaused={isPaused}\n          dataRange={dataRange} colorScale={colorScale}\n          isInputInputLayer={isInputInputLayer} />\n      </div>\n\n      <div class=\"annotation\">\n        <img src='PUBLIC_URL/assets/img/pointer.svg' alt='pointer icon'>\n        <div class=\"annotation-text\">\n          <span style=\"font-weight:600\">悬停鼠标</span> 在矩阵中来查看对应位置的计算过程.\n        </div>\n      </div>\n\n    </div>\n  </div>\n{/if}",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n  import { array1d, compute_input_multiplies_with_weight,\n          generateOutputMappings, gridData\n  } from './DetailviewUtils.js';\n  import HyperparameterDataview from './HyperparameterDataview.svelte';\n  import KernelMathView from './KernelMathView.svelte';\n  // image: nxn array -- prepadded.\n  // kernel: mxm array.\n  // stride: int\n  export let stride;\n  export let dilation\n  export let kernel;\n  export let image;\n  export let output;\n  export let isPaused;\n  export let padding;\n  export let isStrideValid;\n\n  const dispatch = createEventDispatcher();\n\n  let inputHighlights = [];\n  let outputHighlights = array1d(output.length * output.length, (i) => true);\n  let interval;\n  $ : {\n    let inputHighlights = [];\n    let outputHighlights = array1d(output.length * output.length, (i) => true);\n    let interval;\n  }\n\n  let counter;\n  // lots of replication between mouseover and start-conv. TODO: fix this.\n  function startConvolution(stride) {\n    counter = 0;\n    isPaused = false;\n    dispatch('message', {\n      text: isPaused\n    });\n    let outputMappings = generateOutputMappings(stride, output, kernel.length, image.length, dilation);\n    if (stride <= 0) return;\n    if (interval) clearInterval(interval);\n    interval = setInterval(() => {\n      if (isPaused || !isStrideValid) return;\n      const flat_animated = counter % (output.length * output.length);\n      outputHighlights = array1d(output.length * output.length, (i) => false);\n      const animatedH = Math.floor(flat_animated / output.length);\n      const animatedW = flat_animated % output.length;\n      outputHighlights[animatedH * output.length + animatedW] = true;\n      inputHighlights = compute_input_multiplies_with_weight(animatedH, animatedW, image.length, kernel.length, outputMappings, kernel.length)\n      counter++;\n    }, 1000)\n  }\n\n  function handleMouseover(event) {\n    let outputMappings = generateOutputMappings(stride, output, kernel.length, image.length, dilation);\n    outputHighlights = array1d(output.length * output.length, (i) => false);\n    const animatedH = event.detail.hoverH;\n    const animatedW = event.detail.hoverW;\n    outputHighlights[animatedH * output.length + animatedW] = true;\n    inputHighlights = compute_input_multiplies_with_weight(animatedH, animatedW, image.length, kernel.length, outputMappings, kernel.length)\n    isPaused = true;\n    dispatch('message', {\n      text: isPaused\n    });\n  }\n\n  // Fix the total grid size to change hyperparameters without changing the grid\n  // size.  This must be two pixels smaller than the HyperparameterDataview svg\n  // size, so that the stroke on the right side of the grid does not get cut off.\n  const gridSize = 198;\n  startConvolution(stride);\n  let testImage = gridData(image, gridSize / image.length);\n  let testOutput = gridData(output, gridSize / output.length);\n  let testKernel = gridData(kernel, gridSize / kernel.length);\n  $ : {\n    startConvolution(stride);\n    testImage = gridData(image, gridSize / image.length);\n    testOutput = gridData(output, gridSize / output.length);\n    testKernel = gridData(kernel, gridSize / kernel.length);\n  }\n</script>\n\n<style>\n  .wrapper {\n    display: flex;\n    flex-direction: row;\n    align-items: flex-end;\n  }\n\n  .column {\n    padding: 5px 10px 10px 10px;\n  }\n\n  .header-text {\n    line-height: 1.1;\n  }\n\n  .header-sub-text {\n    font-size: 13px;\n    color: #9a9a9a;\n    margin-bottom: 2px;\n  }\n</style>\n\n<div class=\"wrapper\">\n  <div class=\"column has-text-centered\">\n    <div class=\"header-text\">\n      Input ({image.length - 2 * padding}, {image.length - 2 * padding}) <br/>\n    </div>\n    <div class=\"header-sub-text\">\n      After-padding ({image.length}, {image.length})\n    </div>\n    <HyperparameterDataview on:message={handleMouseover} data={testImage} highlights={inputHighlights}\n        outputLength={output.length} stride={stride} padding={padding} isStrideValid={isStrideValid}/>\n  </div>\n  <div class=\"column has-text-centered\">\n    <div class=\"header-text\" style=\"padding-top: 27px;\">\n      Output ({output.length}, {output.length})\n    </div>\n    <div class=\"header-sub-text\">\n      &nbsp;\n    </div>\n    <HyperparameterDataview on:message={handleMouseover} data={testOutput} highlights={outputHighlights}\n        outputLength={output.length} stride={stride} padding={padding} isOutput={true} isStrideValid={isStrideValid}/>\n  </div>\n</div>",
    "<script>\n\timport HyperparameterAnimator from './HyperparameterAnimator.svelte';\n  import { singleConv } from '../utils/cnn.js';\n\n  let inputSize = 5;\n  let kernelSize = 2;\n  let padding = 0;\n  let stride = 1;\n  const dilation = 1;\n  let isPaused = false;\n  let isStrideValid = true;\n  $: inputSizeWithPadding = inputSize + 2 * padding;\n\n  function generateSquareArray(arrayDim) {\n    let arr = [];\n    for (let i = 0; i < arrayDim; i++) {\n      arr.push([]);\n      for (let j = 0; j < arrayDim; j++) {\n        arr[i].push(0)\n      }\n    }\n    return arr;\n  }\n\n  function handleClickPause() {\n    isPaused = !isPaused;\n  }\n\n  function handlePauseFromInteraction(event) {\n    isPaused = event.detail.text;\n  }\n\n  // Update input, kernel, and output as user adjusts hyperparameters.\n  let input = generateSquareArray(inputSize + padding * 2);\n  let kernel = generateSquareArray(kernelSize);\n  $: input = generateSquareArray(inputSize + padding * 2);\n  $: kernel = generateSquareArray(kernelSize);\n  let outputFinal = singleConv(input, kernel, stride);\n  $: if (stride > 0) {\n    const stepSize = (inputSizeWithPadding - kernelSize) / stride + 1;\n    let strideNumberInput = document.getElementById(\"strideNumber\");\n    if (Number.isInteger(stepSize)) {\n      outputFinal = singleConv(input, kernel, stride);\n      if (strideNumberInput != null) {\n        strideNumberInput.className = strideNumberInput.className.replace(\"is-danger\", \"\");\n      }\n      isStrideValid = true;\n    } else {\n      if (!strideNumberInput.className.includes(\"is-danger\")) {\n        strideNumberInput.className += \" is-danger\";\n      }\n      isStrideValid = false;\n      console.log(\"Cannot handle stride of \" + stride);\n    }\n  }\n</script>\n\n<style>\n  .control-button {\n    position: absolute;\n    top: 5px;\n    right: 15px;\n    color: gray;\n    font-size: 22px;\n    opacity: 0.4;\n    cursor: pointer;\n  }\n\n  .control-button:hover {\n    opacity: 0.8;\n  }\n\n  .box {\n    padding: 5px 30px 20px 30px;\n    position: relative;\n  }\n\n  .left-part {\n    display: flex;\n    flex-direction: column;\n    margin-top: 30px;\n  }\n\n  .right-part {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .content-container {\n    display: flex;\n    justify-content: space-around;\n  }\n\n  .field {\n    padding-top: 5px;\n  }\n\n  .annotation {\n    display: flex;\n    align-items: center;\n    padding-left : 10px;\n  }\n\n  .annotation-text-hyper {\n    font-size: 15px;\n    font-style: italic;\n  }\n\n  .annotation > img {\n    width: 20px;\n    margin-right: 5px;\n  }\n\n  .is-very-small {\n    font-size: 12px; \n  }\n\n  .field {\n    align-items: center;\n  }\n\n  .field-label.is-normal {\n    padding-top: 0;\n  }\n\n  .field:not(:last-child) {\n    margin-bottom: 7px;\n  }\n\n  label {\n    display: inline-block;\n    width: 105px;\n    text-align: right;\n    font-weight: 500;\n    color: #4a4a4a;\n  } \n\n  input[type=number] {\n    width: 50px;\n  }\n\n  input[type=range] {\n    width: 160px;\n  }\n</style>\n\n<div class=\"container has-text-centered\" id=\"detailview-container\">\n  <div class=\"box\">\n\n      <div class=\"control-button\" on:click={handleClickPause}>\n        {@html isPaused ?\n          '<i class=\"fas fa-play-circle play-icon\"></i>' :\n          '<i class=\"fas fa-pause-circle\"></i>'}\n      </div>\n\n    <div class=\"content-container\">\n      <div class=\"left-part\">\n\n        <div class=\"input-row\">\n          <div class=\"field is-horizontal\">\n            <div class=\"field-label is-normal\">\n              <label class=\"label\">Input Size:</label>\n            </div>\n            <input class=\"input is-very-small\" type=\"number\" bind:value={inputSize}\n              min={kernelSize} max={7}>\n          </div>\n\n          <input type=\"range\" bind:value={inputSize}\n            min={kernelSize} max={7}>\n        </div>\n\n        <div class=\"input-row\">\n          <div class=\"field is-horizontal\">\n            <div class=\"field-label is-normal\">\n              <label class=\"label\">Padding:</label>\n            </div>\n            <input class=\"input is-very-small\" type=\"number\" bind:value={padding} min={0}\n              max={kernelSize - 1}>\n          </div>\n\n          <input type=\"range\" bind:value={padding} min={0}\n            max={kernelSize - 1}>\n        </div>\n\n        <div class=\"input-row\">\n          <div class=\"field is-horizontal\">\n            <div class=\"field-label is-normal\">\n              <label class=\"label\">Kernel Size:</label>\n            </div>\n            <input class=\"input is-very-small\" type=\"number\" bind:value={kernelSize} min={padding + 1}\n              max={inputSizeWithPadding}>\n          </div>\n\n          <input type=\"range\" bind:value={kernelSize} min={padding + 1}\n            max={inputSizeWithPadding}>\n        </div>\n\n        <div class=\"input-row\">\n          <div class=\"field is-horizontal\">\n            <div class=\"field-label is-normal\">\n              <label class=\"label\">Stride:</label>\n            </div>\n            <input class=\"input is-very-small\" type=number id=\"strideNumber\" bind:value={stride} min=1\n              max={Math.max(inputSizeWithPadding - kernelSize + 1, 2)}>\n          </div>\n\n          <input type=\"range\" bind:value={stride} min=1\n            max={Math.max(inputSizeWithPadding - kernelSize + 1, 2)}>\n        </div>\n      </div>\n\n        <div class=\"right-part\">\n          <HyperparameterAnimator on:message={handlePauseFromInteraction} \n            kernel={kernel} image={input} output={outputFinal} isStrideValid={isStrideValid}\n            stride={stride} dilation={dilation} padding={padding} isPaused={isPaused}/>\n\n          <div class=\"annotation\">\n            <img src='PUBLIC_URL/assets/img/pointer.svg' alt='pointer icon' width=\"25px\">\n            <div class=\"annotation-text-hyper\">\n              <span style=\"font-weight:600\">Hover over</span> the matrices to change kernel position.\n            </div>\n          </div>\n          \n        </div>\n\n    </div>\n\n\n  </div>\n</div>",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n  import { array1d, getMatrixSliceFromOutputHighlights,\n    compute_input_multiplies_with_weight, getVisualizationSizeConstraint,\n    generateOutputMappings, getMatrixSliceFromInputHighlights, gridData\n  } from './DetailviewUtils.js';\n  import Dataview from './Dataview.svelte';\n\n  export let stride;\n  export let dilation\n  export let kernelLength;\n  export let image;\n  export let output;\n  export let isPaused;\n  export let dataRange;\n\n  const dispatch = createEventDispatcher();\n  const padding = 0;\n  let padded_input_size = image.length + padding * 2;\n  $: padded_input_size = image.length + padding * 2;\n\n  // Dummy data for original state of component.\n  let testInputMatrixSlice = [];\n  for (let i = 0; i < kernelLength; i++) {\n    testInputMatrixSlice.push([]);\n    for (let j = 0; j < kernelLength; j++) {\n      testInputMatrixSlice[i].push(0)\n    }\n  }\n  testInputMatrixSlice = gridData(testInputMatrixSlice)\n  let testOutputMatrixSlice = gridData([[0]]);\n\n  let inputHighlights = [];\n  let outputHighlights = array1d(output.length * output.length, (i) => true);\n  let interval;\n  $ : {\n    let inputHighlights = [];\n    let outputHighlights = array1d(output.length * output.length, (i) => true);\n    let interval;\n  }\n  \n  let counter;\n\n  // lots of replication between mouseover and start-pool. TODO: fix this.\n  function startMaxPool(stride) {\n    counter = 0;\n    let outputMappings = generateOutputMappings(stride, output, kernelLength, padded_input_size, dilation);\n    if (stride <= 0) return;\n    if (interval) clearInterval(interval);\n    interval = setInterval(() => {\n      if (isPaused) return;\n      const flat_animated = counter % (output.length * output.length);\n      outputHighlights = array1d(output.length * output.length, (i) => false);\n      const animatedH = Math.floor(flat_animated / output.length);\n      const animatedW = flat_animated % output.length;\n      outputHighlights[animatedH * output.length + animatedW] = true;\n      inputHighlights = compute_input_multiplies_with_weight(animatedH, animatedW, padded_input_size, kernelLength, outputMappings, kernelLength)\n      const inputMatrixSlice = getMatrixSliceFromInputHighlights(image, inputHighlights, kernelLength);\n      testInputMatrixSlice = gridData(inputMatrixSlice);\n      const outputMatrixSlice = getMatrixSliceFromOutputHighlights(output, outputHighlights);\n      testOutputMatrixSlice = gridData(outputMatrixSlice);\n      counter++;\n    }, 250)\n  }\n\n  function handleMouseover(event) {\n    let outputMappings = generateOutputMappings(stride, output, kernelLength, padded_input_size, dilation);\n    outputHighlights = array1d(output.length * output.length, (i) => false);\n    const animatedH = event.detail.hoverH;\n    const animatedW = event.detail.hoverW;\n    outputHighlights[animatedH * output.length + animatedW] = true;\n    inputHighlights = compute_input_multiplies_with_weight(animatedH, animatedW, padded_input_size, kernelLength, outputMappings, kernelLength)\n    const inputMatrixSlice = getMatrixSliceFromInputHighlights(image, inputHighlights, kernelLength);\n    testInputMatrixSlice = gridData(inputMatrixSlice);\n    const outputMatrixSlice = getMatrixSliceFromOutputHighlights(output, outputHighlights);\n    testOutputMatrixSlice = gridData(outputMatrixSlice);\n    isPaused = true;\n    dispatch('message', {\n      text: isPaused\n    });\n  }\n\n  startMaxPool(stride);\n  let testImage = gridData(image)\n  let testOutput = gridData(output)\n  $ : {\n    startMaxPool(stride);\n    testImage = gridData(image)\n    testOutput = gridData(output)\n  }\n</script>\n\n<style>\n  .column {\n    padding: 5px;\n  }\n</style>\n\n<div class=\"column has-text-centered\">\n  <div class=\"header-text\">\n    输入 ({testImage.length}, {testImage[0].length})\n  </div>\n\n  <Dataview on:message={handleMouseover} data={testImage} highlights={inputHighlights} outputLength={output.length}\n      isKernelMath={false} constraint={getVisualizationSizeConstraint(image.length)} dataRange={dataRange} stride={stride}/>  \n</div>\n<div class=\"column has-text-centered\">\n  <span>\n    max(\n    <Dataview data={testInputMatrixSlice} highlights={outputHighlights} isKernelMath={true} \n      constraint={getVisualizationSizeConstraint(kernelLength)} dataRange={dataRange}/>\n    )\n    =\n    <Dataview data={testOutputMatrixSlice} highlights={outputHighlights} isKernelMath={true} \n      constraint={getVisualizationSizeConstraint(kernelLength)} dataRange={dataRange}/>\n  </span> \n</div>\n<div class=\"column has-text-centered\">\n  <div class=\"header-text\">\n    输出 ({testOutput.length}, {testOutput[0].length})\n  </div>\n  <Dataview on:message={handleMouseover} data={testOutput} highlights={outputHighlights} isKernelMath={false} \n      outputLength={output.length} constraint={getVisualizationSizeConstraint(output.length)} dataRange={dataRange} stride={stride}/>\n</div>",
    "<script>\n\timport PoolAnimator from './PoolAnimator.svelte';\n  import { singleMaxPooling } from '../utils/cnn.js';\n  import { createEventDispatcher } from 'svelte';\n\n  export let input;\n  export let kernelLength;\n  export let dataRange;\n  export let isExited;\n  \n  const dispatch = createEventDispatcher();\n  // let isExited = false;\n\tlet stride = 2;\n  const dilation = 1;\n  var isPaused = false;\n  var outputFinal = singleMaxPooling(input);\n  // let dragging = false;\n  // let dragInfo = {x1: 0, x2: 0, y1: 0, y2: 0};\n  // let detailView = d3.select('#detailview').node();\n  $: if (stride > 0) {\n    try { \n      outputFinal = singleMaxPooling(input);\n    } catch {\n      console.log(\"Cannot handle stride of \" + stride);\n    }\n  }\n  \n  function handleClickPause() {\n    isPaused = !isPaused;\n    console.log(isPaused)\n  }\n\n  function handlePauseFromInteraction(event) {\n    isPaused = event.detail.text;\n  }\n\n  function handleClickX() {\n    dispatch('message', {\n      text: true\n    });\n  }\n\n  function handleScroll() {\n    let svgHeight = Number(d3.select('#cnn-svg').style('height').replace('px', '')) + 150;\n    let scroll = new SmoothScroll('a[href*=\"#\"]', {offset: -svgHeight});\n    let anchor = document.querySelector(`#article-pooling`);\n    scroll.animateScroll(anchor);\n  }\n\n  // Test dragging detail view, need more work\n  // const detailViewDragStart = (e) => {\n  //   // Record the starting pos\n  //   dragInfo.x1 = 0;\n  //   dragInfo.y1 = 0;\n  //   dragInfo.x2 = e.clientX;\n  //   dragInfo.y2 = e.clientY;\n  \n  //   dragging = true;\n  // }\n\n  // const detailViewDragEnd = (e) => {\n  //   dragging = false;\n  // }\n\n  // const detailViewDragMove = (e) => {\n  //   // Add up move to the starting pos\n  //   dragInfo.x1 = dragInfo.x2 - e.clientX;\n  //   dragInfo.y1 = dragInfo.y2 - e.clientY;\n  //   dragInfo.x2 = e.clientX;\n  //   dragInfo.y2 = e.clientY;\n\n  //   // Move detail view\n  //   detailView.style.top = (detailView.offsetTop - dragInfo.y1) + 'px';\n  //   detailView.style.left = (detailView.offsetLeft - dragInfo.x1) + 'px';\n  // }\n</script>\n\n<style>\n  .control-pannel {\n    display: flex;\n    position: relative;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  .buttons {\n    cursor: pointer;\n    position: absolute;\n    top: 0px;\n    right: 0px;\n  }\n\n  .control-button {\n    color: gray;\n    font-size: 15px;\n    opacity: 0.4;\n    cursor: pointer;\n  }\n\n  .control-button:not(:first-child) {\n    margin-left: 5px;\n  }\n\n  .annotation {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding-left : 10px;\n    font-size: 12px;\n  }\n\n  .annotation > img {\n    width: 17px;\n    margin-right: 5px;\n  }\n\n\n  .control-button:hover {\n    opacity: 0.8;\n  }\n\n  .box {\n    padding: 5px 15px 10px 15px;\n  }\n\n  .container {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n\n  .title-text {\n    font-size: 1.2em;\n    font-weight: 500;\n    color: #4a4a4a;\n  }\n</style>\n\n{#if !isExited}\n  <div class=\"container\">\n\n    <!-- old stride input -->\n    <!-- <div class=\"columns is-mobile\">\n      <div class=\"column is-half is-offset-one-quarter\">\n        <div class=\"field is-grouped\">\n          <p class=\"control is-expanded\">\n            <input class=\"input\" type=\"text\" placeholder=\"Stride\" bind:value={stride} />\n          </p>\n          <p class=\"control\">\n            <button class=\"button is-success\" on:click={handleClickPause}>\n              Toggle Movement\n            </button>\n          </p>\n        </div>\n      </div>\n    </div> -->\n    <div class=\"box\">\n\n      <div class=\"control-pannel\">\n      \n        <div class=\"title-text\">\n          最大值池化\n        </div>\n\n        <div class=\"buttons\">\n\n          <div class=\"control-button\" on:click={handleScroll} title=\"Jump to article section\">\n            <i class=\"fas fa-info-circle\"></i>\n          </div>\n\n          <div class=\"play-button control-button\" on:click={handleClickPause} title=\"Play animation\">\n            {@html isPaused ?\n              '<i class=\"fas fa-play-circle play-icon\"></i>' :\n              '<i class=\"fas fa-pause-circle\"></i>'}\n          </div>\n\n          <div class=\"delete-button control-button\" on:click={handleClickX} title=\"Close\">\n            <i class=\"fas control-icon fa-times-circle\"></i>\n          </div>\n        </div>\n\n      </div>\n\n      <div class=\"container is-centered is-vcentered\">\n        <PoolAnimator on:message={handlePauseFromInteraction} \n          kernelLength={kernelLength} image={input} output={outputFinal} \n          stride={stride} dilation={dilation} isPaused={isPaused}\n          dataRange={dataRange} />\n      </div>\n\n      <div class=\"annotation\">\n        <img src='PUBLIC_URL/assets/img/pointer.svg' alt='pointer icon'>\n          <div class=\"annotation-text\">\n            <span style=\"font-weight:600\">悬停鼠标</span> 在矩阵中来查看对应位置的计算过程.\n          </div>\n      </div>\n\n    </div>\n  </div>\n{/if}",
    "<script>\n  import { onMount, afterUpdate, createEventDispatcher } from 'svelte';\n  export let logits;\n  export let logitColors;\n  export let selectedI;\n  export let highlightI = -1;\n  export let outputName;\n  export let outputValue;\n  export let startAnimation;\n\n  let softmaxViewComponent;\n  let svg = null;\n  const dispatch = createEventDispatcher();\n  const formater = (n, d) => {\n    if (d === undefined) {\n      return d3.format('.2f')(n);\n    } else {\n      return d3.format(`.${d}f`)(n);\n    }\n  }\n\n  $: highlightI, (() => {\n    if (svg !== null) {\n      svg.selectAll(`.formula-term`)\n        .style('text-decoration', 'none')\n        .style('font-weight', 'normal');\n\n      svg.selectAll(`.formula-term-${highlightI}`)\n      .style('font-weight', 'bold')\n      .style('text-decoration', 'underline');\n    }\n  })();\n\n  $: startAnimation, (() => {\n    if (svg !== null) {\n      svg.select(`.formula-term-${startAnimation.i}`)\n        .transition('softmax-edge')\n        .duration(startAnimation.duration)\n        .style('fill-opacity', 1);\n    }\n  })();\n\n  const mouseOverHandler = (d, i, g, curI) => {\n    highlightI = curI;\n    dispatch('mouseOver', {curI: curI});\n  }\n\n  const mouseLeaveHandler = (d, i, g, curI) => {\n    highlightI = -1;\n    dispatch('mouseLeave', {curI: curI});\n  }\n\n  const handleClickX = () => {\n    dispatch('xClicked', {});\n  }\n\n  function handleScroll() {\n    let svgHeight = Number(d3.select('#cnn-svg').style('height').replace('px', '')) + 150;\n    let scroll = new SmoothScroll('a[href*=\"#\"]', {offset: -svgHeight});\n    let anchor = document.querySelector(`#article-softmax`);\n    scroll.animateScroll(anchor);\n  }\n\n  onMount(() => {\n    svg = d3.select(softmaxViewComponent)\n      .select('#softmax-svg');\n\n    let formulaRightGroup = svg.append('g')\n      .attr('class', 'formula-right')\n      .attr('transform', `translate(${10}, ${0})`)\n      .style('font-size', '15px');\n\n    // Denominator\n    let denominatorGroup = formulaRightGroup.append('g')\n      .attr('class', 'denominator')\n      .attr('transform', `translate(${0}, ${58})`);\n      \n    // Add the left (\n    denominatorGroup.append('text')\n      .attr('x', 0)\n      .attr('y', 0)\n      .style('fill', 'gray')\n      .text('(');\n\n    // Need to loop through the logits array instead of data-binding because\n    // we want dynamic positioning based on prior '-' occurance\n    let curX = 8;\n    let numOfRows = 4;\n\n    logits.forEach((d, i) => {\n      if (i / numOfRows >= 1 && i % numOfRows === 0) {\n          curX = 8;\n      }\n\n      let curText = denominatorGroup.append('text')\n        .attr('x', curX)\n        .attr('y', Math.floor(i / numOfRows) * 20)\n        .style('cursor', 'crosshair')\n        .style('pointer-events', 'all')\n        .on('mouseover', (d, n, g) => mouseOverHandler(d, n, g, i))\n        .on('mouseleave', (d, n, g) => mouseLeaveHandler(d, n, g, i))\n        .text(`exp(`);\n      \n      curText.append('tspan')\n        .attr('class', `formula-term-${i} formula-term`)\n        .attr('dx', '1')\n        .style('fill', logitColors[i])\n        .style('fill-opacity', (i === selectedI) || startAnimation.hasInitialized ? 1 : 0)\n        .text(formater(d));\n      \n      curText.append('tspan')\n        .attr('dx', '1')\n        .text(')');\n      \n      let curBBox = curText.node().getBBox();\n      curX += curBBox.width + 4;\n\n      if (i !== logits.length - 1) {\n        denominatorGroup.append('text')\n          .attr('x', curX)\n          .attr('y', Math.floor(i / numOfRows) * 20)\n          .text('+');\n        curX += 14;\n      } else {\n        denominatorGroup.append('text')\n          .attr('x', curX-2)\n          .attr('y', Math.floor(i / numOfRows) * 20)\n          .style('fill', 'gray')\n          .text(')');\n      }\n    })\n\n    denominatorGroup.selectAll('text')\n      .data(logits)\n      .enter()\n      .append('text')\n      .attr('x', (d, i) => 40 * i)\n      .attr('y', 0)\n      .text(d => formater(d));\n    \n    // Calculate the dynamic denominator group width\n    let denominatorGroupBBox = denominatorGroup.node().getBBox();\n\n    // Draw the fraction line\n    formulaRightGroup.append('line')\n      .attr('class', 'separation-line')\n      .attr('x1', -5)\n      .attr('x2', denominatorGroupBBox.width + 5)\n      .attr('y1', 32)\n      .attr('y2', 32)\n      .style('stroke-width', 1.2)\n      .style('stroke', 'gray');\n    \n    // Draw the numerator\n    let numeratorGroup = formulaRightGroup.append('g')\n      .attr('class', 'numerator-group')\n      .attr('transform', `translate(${0}, ${20})`);\n    \n    let numeratorText = numeratorGroup.append('text')\n      .attr('x', denominatorGroupBBox.x + denominatorGroupBBox.width / 2)\n      .attr('y', 0)\n      .on('mouseover', (d, n, g) => mouseOverHandler(d, n, g, selectedI))\n      .on('mouseleave', (d, n, g) => mouseLeaveHandler(d, n, g, selectedI))\n      .style('pointer-events', 'all')\n      .style('cursor', 'crosshair')\n      .style('text-anchor', 'middle')\n      .text('exp(');\n\n    numeratorText.append('tspan')\n      .attr('class', `formula-term-${selectedI} formula-term`)\n      .attr('dx', 1)\n      .style('fill', logitColors[selectedI])\n      .text(`${formater(logits[selectedI])}`);\n\n    numeratorText.append('tspan')\n       .attr('dx', 1)\n      .text(')');\n    \n    // Draw the left part of the formula\n    let formulaLeftGroup = svg.append('g')\n      .attr('class', 'formula-left')\n      .attr('transform', `translate(${395}, ${32})`);\n    \n    let softmaxText = formulaLeftGroup.append('text')\n      .attr('x', 20)\n      .attr('dominant-baseline', 'middle')\n      .text(`${formater(outputValue, 4)}`);\n    \n    let softmaxTextBBox = softmaxText.node().getBBox();\n    \n    formulaLeftGroup.append('text')\n      .attr('dominant-baseline', 'middle')\n      .attr('x', 0)\n      .attr('y', 0)\n      .style('fill', 'gray')\n      .style('font-weight', 'bold')\n      .text('=');\n\n  })\n\n</script>\n\n<style>\n  .buttons {\n    cursor: pointer;\n    position: absolute;\n    top: 6px;\n    right: 10px;\n  }\n\n  .control-button {\n    color: gray;\n    font-size: 15px;\n    opacity: 0.4;\n  }\n\n  .control-button:hover {\n    opacity: 0.8;\n  }\n\n  .control-button:not(:first-child) {\n    margin-left: 5px;\n  }\n\n  .title-text {\n    font-size: 1.2em;\n    font-weight: 500;\n    color: #4a4a4a;\n  }\n\n  .annotation {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding-left : 10px;\n    font-size: 12px;\n  }\n\n  .annotation > img {\n    width: 17px;\n    margin-right: 5px;\n  }\n\n  .box {\n    padding: 5px 10px 15px 10px;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  svg {\n    margin: 10px 0 12px 0;\n  }\n</style>\n\n<div class=\"container\" bind:this={softmaxViewComponent}>\n  <div class=\"box\">\n\n    <div class=\"buttons\">\n      <div class=\"control-button\" on:click={handleScroll} title=\"Jump to article section\">\n        <i class=\"fas fa-info-circle\"></i>\n      </div>\n\n      <div class=\"delete-button control-button\" on:click={handleClickX} title=\"Close\">\n        <i class=\"fas control-icon fa-times-circle\"></i>\n      </div>\n    </div>\n\n    <div class=\"title-text\">\n      <i>\"{outputName}\"</i> 的Softmax概率结果\n    </div>\n\n    <svg id=\"softmax-svg\" width=\"470\" height=\"105\"/>\n\n    <div class=\"annotation\">\n      <img src='PUBLIC_URL/assets/img/pointer.svg' alt='pointer icon'>\n      <div class=\"annotation-text\">\n        <span style=\"font-weight:600\">悬停鼠标</span> 高亮对应值的计算路径.\n      </div>\n    </div>\n\n  </div>\n</div>\n\n",
    "<script>\n  /* global d3 */\n\n  import { onMount, createEventDispatcher } from 'svelte';\n  import { modalStore } from '../stores.js';\n\n  let modalComponent;\n  let valiImg;\n  let inputValue = '';\n  let showLoading = false;\n  let files;\n  let usingURL = true;\n  let errorInfo = {\n    show: false,\n    error: ''\n  };\n  const dispatch = createEventDispatcher();\n\n  let modalInfo = {\n    show: false\n  };\n  modalStore.set(modalInfo);\n  modalStore.subscribe(value => {modalInfo = value});\n\n  const errorCallback = () => {\n    // The URL is invalid, show an error message on the UI\n    showLoading = false;\n    errorInfo.show = true;\n    errorInfo.error = usingURL ? \"We can't find the image at that URL.\" :\n      \"Not a valid image file.\";\n  }\n\n  const loadCallback = () => {\n    // The URL is valid, but we are not sure if loading it to canvas would be\n    // blocked by crossOrigin setting. Try it here before dispatch to parent.\n\n    // https://stackoverflow.com/questions/13674835/canvas-tainted-by-cross-origin-data\n    let canvas = document.createElement(\"canvas\");\n    let context = canvas.getContext(\"2d\");\n\n    canvas.width = valiImg.width;\n    canvas.height = valiImg.height;\n    context.drawImage(valiImg, 0, 0);\n\n    try {\n      context.getImageData(0, 0, valiImg.width, valiImg.height);\n      // If the foreign image does support CORS -> use this image\n      // dispatch to parent component to use the input image\n      showLoading = false;\n      modalInfo.show = false;\n      modalStore.set(modalInfo);\n      dispatch('urlTyped', {url: valiImg.src});\n      inputValue = null;\n    } catch(err) {\n      // If the foreign image does not support CORS -> use this image\n      showLoading = false;\n      errorInfo.show = true;\n      errorInfo.error = \"No permission to load this image.\"\n    }\n  }\n\n  const imageUpload = () => {\n    usingURL = false;\n    let reader = new FileReader();\n    reader.onload = (event) => {\n      valiImg.src = event.target.result;\n    }\n    reader.readAsDataURL(files[0]);\n  }\n\n  const crossClicked = () => {\n    modalInfo.show = false;\n    modalStore.set(modalInfo);\n    // Dispatch the parent component\n    dispatch('xClicked', {preImage: modalInfo.preImage});\n  }\n\n  const addClicked = () => {\n    // Validate the input URL\n    showLoading = true;\n    errorInfo.show = false;\n    valiImg.crossOrigin = \"Anonymous\";\n    valiImg.src = inputValue;\n  }\n\n  onMount(() => {\n    let modal = d3.select(modalComponent)\n      .select('#input-modal');\n  })\n\n</script>\n\n<style>\n  .modal-card {\n    max-width: 500px;\n  }\n\n  .modal-card-title {\n    font-size: 20px;\n  }\n\n  .modal-card-head {\n    padding: 15px 20px;\n  }\n\n  .modal-card-foot {\n    padding: 12px 20px;\n    justify-content: space-between;\n  }\n\n  .is-smaller {\n    font-size: 15px;\n    padding: 0.5em 0.8em;\n    max-height: 2.2em;\n  }\n\n  .small-font {\n    font-size: 15px;\n  }\n\n  .error-message {\n    font-size: 15px;\n    padding: 0.5em 0;\n    color: #F22B61;\n  }\n\n  .control {\n    width: 100%;\n  }\n\n  .or-label {\n    font-size: 15px;\n    margin: 0 10px;\n    padding: 0.5em 0;\n  }\n\n  .field {\n    display: flex;\n    justify-content: space-between;\n  }\n\n</style>\n\n\n<div class=\"modal-component\"\n  bind:this={modalComponent}>\n\n  <div class=\"modal\"\n    id=\"input-modal\"\n    class:is-active={modalInfo.show}>\n\n    <div class=\"modal-background\" on:click={crossClicked}></div>\n\n    <div class=\"modal-card\">\n      <header class=\"modal-card-head\">\n        <p class=\"modal-card-title\">自定义输入图片</p>\n        <button class=\"delete\" aria-label=\"close\" on:click={crossClicked}></button>\n      </header>\n\n      <section class=\"modal-card-body\">\n        <div class=\"field\">\n          <div class=\"control has-icons-left\"\n            class:is-loading={showLoading}>\n\n            <input class=\"input small-font\" type=\"url\"\n              bind:value={inputValue}\n              placeholder=\"输入图片的网址链接...\">\n\n            <span class=\"icon small-font is-left\">\n              <i class=\"fas fa-link\"></i>\n            </span>\n\n          </div>\n\n          <div class=\"or-label\">or</div>\n\n          <div class=\"file\">\n            <label class=\"file-label\">\n              <input class=\"file-input\" type=\"file\" name=\"image\"\n                accept=\".png,.jpeg,.tiff,.jpg,.png\"\n                on:change={imageUpload}\n                bind:files={files}>\n              <span class=\"file-cta small-font\">\n                <span class=\"file-icon\">\n                  <i class=\"fas fa-upload\"></i>\n                </span>\n                <span class=\"file-label\">\n                  上传图片\n                </span>\n              </span>\n            </label>\n          </div>\n\n        </div>\n\n      </section>\n\n      <footer class=\"modal-card-foot\">\n\n        <div class=\"error-message\"\n          class:hidden={!errorInfo.show}>\n          {errorInfo.error}\n        </div>\n\n        <div class=\"button-container\">\n          <button class=\"button is-smaller\"\n            on:click={crossClicked}>\n            取消\n          </button>\n\n          <button class=\"button is-success is-smaller\"\n            on:click={addClicked}>\n            确定\n          </button>\n        </div>\n\n\n      </footer>\n    </div>\n\n  </div>\n\n  <!-- An invisible image to check if the user input URL is valid -->\n  <img style=\"display: none\"\n    id=\"vali-image\"\n    alt=\"hidden image\"\n    bind:this={valiImg}\n    on:error={errorCallback}\n    on:load={loadCallback} />\n\n</div>\n",
    "<script>\n  // Svelte functions\n  import { onMount } from 'svelte';\n  import {\n    cnnStore, svgStore, vSpaceAroundGapStore, hSpaceAroundGapStore,\n    nodeCoordinateStore, selectedScaleLevelStore, cnnLayerRangesStore,\n    needRedrawStore, cnnLayerMinMaxStore, detailedModeStore,\n    shouldIntermediateAnimateStore, isInSoftmaxStore, softmaxDetailViewStore,\n    hoverInfoStore, allowsSoftmaxAnimationStore, modalStore,\n    intermediateLayerPositionStore\n  } from '../stores.js';\n\n  // Svelte views\n  import ConvolutionView from '../detail-view/Convolutionview.svelte';\n  import ActivationView from '../detail-view/Activationview.svelte';\n  import PoolView from '../detail-view/Poolview.svelte';\n  import SoftmaxView from '../detail-view/Softmaxview.svelte';\n  import Modal from './Modal.svelte'\n  import Article from '../article/Article.svelte';\n\n  // Overview functions\n  import { loadTrainedModel, constructCNN } from '../utils/cnn-tf.js';\n  import { overviewConfig } from '../config.js';\n\n  import {\n    addOverlayRect, drawConv1, drawConv2, drawConv3, drawConv4\n  } from './intermediate-draw.js';\n\n  import {\n    moveLayerX, addOverlayGradient\n  } from './intermediate-utils.js';\n\n  import {\n    drawFlatten, softmaxDetailViewMouseOverHandler, softmaxDetailViewMouseLeaveHandler, drawOutFlatten\n  } from './flatten-draw.js';\n\n  import {\n    drawOutput, drawCNN, updateCNN, updateCNNLayerRanges, drawCustomImage\n  } from './overview-draw.js';\n\n\n  // View bindings\n  let overviewComponent;\n  let scaleLevelSet = new Set(['local', 'module', 'global']);\n  let selectedScaleLevel = 'local';\n  selectedScaleLevelStore.set(selectedScaleLevel);\n  let previousSelectedScaleLevel = selectedScaleLevel;\n  let wholeSvg = undefined;\n  let svg = undefined;\n\n  $: selectedScaleLevel, selectedScaleLevelChanged();\n\n  // Configs\n  const layerColorScales = overviewConfig.layerColorScales;\n  const nodeLength = overviewConfig.nodeLength;\n  const plusSymbolRadius = overviewConfig.plusSymbolRadius;\n  const numLayers = overviewConfig.numLayers;\n  const edgeOpacity = overviewConfig.edgeOpacity;\n  const edgeInitColor = overviewConfig.edgeInitColor;\n  const edgeHoverColor = overviewConfig.edgeHoverColor;\n  const edgeHoverOuting = overviewConfig.edgeHoverOuting;\n  const edgeStrokeWidth = overviewConfig.edgeStrokeWidth;\n  const intermediateColor = overviewConfig.intermediateColor;\n  const kernelRectLength = overviewConfig.kernelRectLength;\n  const svgPaddings = overviewConfig.svgPaddings;\n  const gapRatio = overviewConfig.gapRatio;\n  const overlayRectOffset = overviewConfig.overlayRectOffset;\n  const classLists = overviewConfig.classLists;\n\n  // Shared properties\n  let needRedraw = [undefined, undefined];\n  needRedrawStore.subscribe( value => {needRedraw = value;} );\n\n  let nodeCoordinate = undefined;\n  nodeCoordinateStore.subscribe( value => {nodeCoordinate = value;} )\n\n  let cnnLayerRanges = undefined;\n  cnnLayerRangesStore.subscribe( value => {cnnLayerRanges = value;} )\n\n  let cnnLayerMinMax = undefined;\n  cnnLayerMinMaxStore.subscribe( value => {cnnLayerMinMax = value;} )\n\n  let detailedMode = undefined;\n  detailedModeStore.subscribe( value => {detailedMode = value;} )\n\n  let shouldIntermediateAnimate = undefined;\n  shouldIntermediateAnimateStore.subscribe(value => {\n    shouldIntermediateAnimate = value;\n  })\n\n  let vSpaceAroundGap = undefined;\n  vSpaceAroundGapStore.subscribe( value => {vSpaceAroundGap = value;} )\n\n  let hSpaceAroundGap = undefined;\n  hSpaceAroundGapStore.subscribe( value => {hSpaceAroundGap = value;} )\n\n  let isInSoftmax = undefined;\n  isInSoftmaxStore.subscribe( value => {isInSoftmax = value;} )\n\n  let softmaxDetailViewInfo = undefined;\n  softmaxDetailViewStore.subscribe( value => {\n    softmaxDetailViewInfo = value;\n  } )\n  \n  let modalInfo = undefined;\n  modalStore.subscribe( value => {modalInfo = value;} )\n\n  let hoverInfo = undefined;\n  hoverInfoStore.subscribe( value => {hoverInfo = value;} )\n\n  let intermediateLayerPosition = undefined;\n  intermediateLayerPositionStore.subscribe ( value => {intermediateLayerPosition = value;} )\n\n  let width = undefined;\n  let height = undefined;\n  let model = undefined;\n  let selectedNode = {layerName: '', index: -1, data: null};\n  let isInIntermediateView = false;\n  let isInActPoolDetailView = false;\n  let actPoolDetailViewNodeIndex = -1;\n  let actPoolDetailViewLayerIndex = -1;\n  let detailedViewNum = undefined;\n  let disableControl = false;\n\n  // Wait to load\n  let cnn = undefined;\n\n  let detailedViewAbsCoords = {\n    1 : [600, 270, 490, 290],\n    2: [500, 270, 490, 290],\n    3 : [700, 270, 490, 290],\n    4: [600, 270, 490, 290],\n    5: [650, 270, 490, 290],\n    6 : [775, 270, 490, 290],\n    7 : [100, 270, 490, 290],\n    8 : [60, 270, 490, 290],\n    9 : [200, 270, 490, 290],\n    10 : [300, 270, 490, 290],\n  }\n\n  const layerIndexDict1 = {\n    'input': 0,\n    'conv_1_1': 1,\n    'relu_1_1': 2,\n    'conv_1_2': 3,\n    'relu_1_2': 4,\n    'max_pool_1': 5,\n    'conv_2_1': 6,\n    'relu_2_1': 7,\n    'conv_2_2': 8,\n    'relu_2_2': 9,\n    'max_pool_2': 10,\n    'output': 11\n  }\n  const layerIndexDict = {\n    'input': 0,\n    'conv2d_22': 1,\n    'max_pooling2d_21': 2,\n    'conv2d_23': 3,\n    'max_pooling2d_22': 4,\n    'dense_22': 5,\n    'output': 6,\n  }\n  const layerLegendDict = {\n    0: {local: 'input-legend', module: 'input-legend', global: 'input-legend'},\n    1: {local: 'local-legend-0-1', module: 'module-legend-0', global: 'global-legend'},\n    2: {local: 'local-legend-0-1', module: 'module-legend-0', global: 'global-legend'},\n    3: {local: 'local-legend-0-2', module: 'module-legend-0', global: 'global-legend'},\n    4: {local: 'local-legend-0-2', module: 'module-legend-0', global: 'global-legend'},\n    5: {local: 'local-legend-0-2', module: 'module-legend-0', global: 'global-legend'},\n    6: {local: 'local-legend-1-1', module: 'module-legend-1', global: 'global-legend'},\n    7: {local: 'local-legend-1-1', module: 'module-legend-1', global: 'global-legend'},\n    8: {local: 'local-legend-1-2', module: 'module-legend-1', global: 'global-legend'},\n    9: {local: 'local-legend-1-2', module: 'module-legend-1', global: 'global-legend'},\n    10: {local: 'local-legend-1-2', module: 'module-legend-1', global: 'global-legend'},\n    11: {local: 'output-legend', module: 'output-legend', global: 'output-legend'}\n  }\n\n  let imageOptions = [\n    {file: 'IS2.jpg', class: '山鸢尾'},\n    {file: 'IV1.jpg', class: '杂色鸢尾'},\n    {file: 'IVA5.jpg', class: '维吉尼亚鸢尾'}\n  ];\n  let selectedImage = imageOptions[0].file;\n\n  let nodeData;\n  let selectedNodeIndex = -1;\n  let isExitedFromDetailedView = true;\n  let isExitedFromCollapse = true;\n  let customImageURL = null;\n\n  // Helper functions\n  const selectedScaleLevelChanged = () => {\n    if (svg !== undefined) {\n      if (!scaleLevelSet.add(selectedScaleLevel)) {\n        console.error('Encounter unknown scale level!');\n      }\n\n      // Update nodes and legends\n      if (selectedScaleLevel != previousSelectedScaleLevel){\n        // We can simply redraw all nodes using the new color scale, or we can\n        // make it faster by only redraw certian nodes\n        let updatingLayerIndexDict = {\n          local: {\n            module: [1, 2, 8, 9, 10],\n            global: [1, 2, 3, 4, 5, 8, 9, 10]\n          },\n          module: {\n            local: [1, 2, 8, 9, 10],\n            global: [1, 2, 3, 4, 5, 8, 9, 10]\n          },\n          global: {\n            local: [1, 2, 3, 4, 5, 8, 9, 10],\n            module: [1, 2, 3, 4, 5]\n          }\n        };\n\n        let updatingLayerIndex = updatingLayerIndexDict[\n          previousSelectedScaleLevel][selectedScaleLevel];\n\n        updatingLayerIndex.forEach(l => {\n          let range = cnnLayerRanges[selectedScaleLevel][l];\n          svg.select(`#cnn-layer-group-${l}`)\n            .selectAll('.node-image')\n            .each((d, i, g) => drawOutput(d, i, g, range));\n        });\n \n        // Hide previous legend\n        svg.selectAll(`.${previousSelectedScaleLevel}-legend`)\n          .classed('hidden', true);\n\n        // Show selected legends\n        svg.selectAll(`.${selectedScaleLevel}-legend`)\n          .classed('hidden', !detailedMode);\n      }\n      previousSelectedScaleLevel = selectedScaleLevel;\n      selectedScaleLevelStore.set(selectedScaleLevel);\n    }\n  }\n\n  const intermediateNodeMouseOverHandler = (d, i, g) => {\n    if (detailedViewNum !== undefined) { return; }\n    svg.select(`rect#underneath-gateway-${d.index}`)\n      .style('opacity', 1);\n  }\n\n  const intermediateNodeMouseLeaveHandler = (d, i, g) => {\n    // return;\n    if (detailedViewNum !== undefined) { return; }\n    svg.select(`rect#underneath-gateway-${d.index}`)\n      .style('opacity', 0);\n  }\n\n  const intermediateNodeClicked = (d, i, g, selectedI, curLayerIndex) => {\n    d3.event.stopPropagation();\n    isExitedFromCollapse = false;\n    // Use this event to trigger the detailed view\n    if (detailedViewNum === d.index) {\n      // Setting this for testing purposes currently.\n      selectedNodeIndex = -1; \n      // User clicks this node again -> rewind\n      detailedViewNum = undefined;\n      svg.select(`rect#underneath-gateway-${d.index}`)\n        .style('opacity', 0);\n    } \n    // We need to show a new detailed view (two cases: if we need to close the\n    // old detailed view or not)\n    else {\n      // Setting this for testing purposes currently.\n      selectedNodeIndex = d.index;\n      let inputMatrix = d.output;\n      let kernelMatrix = d.outputLinks[selectedI].weight;\n      // let interMatrix = singleConv(inputMatrix, kernelMatrix);\n      let colorScale = layerColorScales.conv;\n\n      // Compute the color range\n      let rangePre = cnnLayerRanges[selectedScaleLevel][curLayerIndex - 1];\n      let rangeCur = cnnLayerRanges[selectedScaleLevel][curLayerIndex];\n      let range = Math.max(rangePre, rangeCur);\n\n      // User triggers a different detailed view\n      if (detailedViewNum !== undefined) {\n        // Change the underneath highlight\n        svg.select(`rect#underneath-gateway-${detailedViewNum}`)\n          .style('opacity', 0);\n        svg.select(`rect#underneath-gateway-${d.index}`)\n          .style('opacity', 1);\n      }\n      \n      // Dynamically position the detail view\n      let wholeSvg = d3.select('#cnn-svg');\n      let svgYMid = +wholeSvg.style('height').replace('px', '') / 2;\n      let svgWidth = +wholeSvg.style('width').replace('px', '');\n      let detailViewTop = 100 + svgYMid - 250 / 2;\n      let positionX = intermediateLayerPosition[Object.keys(layerIndexDict)[curLayerIndex]];\n\n      let posX = 0;\n      if (curLayerIndex > 6) {\n        posX = (positionX - svgPaddings.left) / 2;\n        posX = svgPaddings.left + posX - 486 / 2;\n      } else {\n        posX = (svgWidth + svgPaddings.right - positionX) / 2;\n        posX = positionX + posX - 486 / 2;\n      }\n\n      const detailview = document.getElementById('detailview');\n      detailview.style.top = `${detailViewTop}px`;\n      detailview.style.left = `${posX}px`;\n      detailview.style.position = 'absolute';\n\n      detailedViewNum = d.index;\n\n      // Send the currently used color range to detailed view\n      nodeData.colorRange = range;\n      nodeData.inputIsInputLayer = curLayerIndex <= 1;\n    }\n  }\n\n  // The order of the if/else statements in this function is very critical\n  const emptySpaceClicked = () => {\n    // If detail view -> rewind to intermediate view\n    if (detailedViewNum !== undefined) {\n          // Setting this for testing purposes currently.\n      selectedNodeIndex = -1; \n      // User clicks this node again -> rewind\n      svg.select(`rect#underneath-gateway-${detailedViewNum}`)\n        .style('opacity', 0);\n      detailedViewNum = undefined;\n    }\n\n    // If softmax view -> rewind to flatten layer view\n    else if (isInSoftmax) {\n      svg.select('.softmax-symbol')\n        .dispatch('click');\n    }\n\n    // If intermediate view -> rewind to overview\n    else if (isInIntermediateView) {\n      let curLayerIndex = layerIndexDict[selectedNode.layerName];\n      quitIntermediateView(curLayerIndex, selectedNode.domG, selectedNode.domI);\n      d3.select(selectedNode.domG[selectedNode.domI])\n        .dispatch('mouseleave');\n    }\n\n    // If pool/act detail view -> rewind to overview\n    else if (isInActPoolDetailView) {\n      quitActPoolDetailView();\n    }\n  }\n\n  const prepareToEnterIntermediateView = (d, g, i, curLayerIndex) => {\n    isInIntermediateView = true;\n    // Hide all legends\n    svg.selectAll(`.${selectedScaleLevel}-legend`)\n      .classed('hidden', true);\n    svg.selectAll('.input-legend').classed('hidden', true);\n    svg.selectAll('.output-legend').classed('hidden', true);\n\n    // Hide the input annotation\n    svg.select('.input-annotation')\n      .classed('hidden', true);\n\n    // Highlight the previous layer and this node\n    svg.select(`g#cnn-layer-group-${curLayerIndex - 1}`)\n      .selectAll('rect.bounding')\n      .style('stroke-width', 2);\n    \n    d3.select(g[i])\n      .select('rect.bounding')\n      .style('stroke-width', 2);\n    \n    // Disable control panel UI\n    // d3.select('#level-select').property('disabled', true);\n    // d3.selectAll('.image-container')\n    //   .style('cursor', 'not-allowed')\n    //   .on('mouseclick', () => {});\n    disableControl = true;\n    \n    // Allow infinite animation loop\n    shouldIntermediateAnimateStore.set(true);\n\n    // Highlight the labels\n    svg.selectAll(`g#layer-label-${curLayerIndex - 1},\n      g#layer-detailed-label-${curLayerIndex - 1},\n      g#layer-label-${curLayerIndex},\n      g#layer-detailed-label-${curLayerIndex}`)\n      .style('font-weight', '800');\n    \n    // Register a handler on the svg element so user can click empty space to quit\n    // the intermediate view\n    d3.select('#cnn-svg')\n      .on('click', emptySpaceClicked);\n  }\n\n  const quitActPoolDetailView = () => {\n    isInActPoolDetailView = false;\n    actPoolDetailViewNodeIndex = -1;\n\n    let layerIndex = layerIndexDict[selectedNode.layerName];\n    let nodeIndex = selectedNode.index;\n    svg.select(`g#layer-${layerIndex}-node-${nodeIndex}`)\n      .select('rect.bounding')\n      .classed('hidden', true);\n\n    selectedNode.data.inputLinks.forEach(link => {\n      let layerIndex = layerIndexDict[link.source.layerName];\n      let nodeIndex = link.source.index;\n      svg.select(`g#layer-${layerIndex}-node-${nodeIndex}`)\n        .select('rect.bounding')\n        .classed('hidden', true);\n    })\n\n    // Clean up the underneath rects\n    svg.select('g.underneath')\n      .selectAll('rect')\n      .remove();\n\n    // Show all edges\n    let unimportantEdges = svg.select('g.edge-group')\n      .selectAll('.edge')\n      .filter(d => {\n        return d.targetLayerIndex !== actPoolDetailViewLayerIndex;\n      })\n      .style('visibility', null);\n    \n    // Recover control UI\n    disableControl = false;\n\n    // Show legends if in detailed mode\n    svg.selectAll(`.${selectedScaleLevel}-legend`)\n      .classed('hidden', !detailedMode);\n    svg.selectAll('.input-legend').classed('hidden', !detailedMode);\n    svg.selectAll('.output-legend').classed('hidden', !detailedMode);\n\n    // Also dehighlight the edge\n    let edgeGroup = svg.select('g.cnn-group').select('g.edge-group');\n    edgeGroup.selectAll(`path.edge-${layerIndex}-${nodeIndex}`)\n      .transition()\n      .ease(d3.easeCubicOut)\n      .duration(200)\n      .style('stroke', edgeInitColor)\n      .style('stroke-width', edgeStrokeWidth)\n      .style('opacity', edgeOpacity);\n\n    // Remove the overlay rect\n    svg.selectAll('g.intermediate-layer-overlay, g.intermediate-layer-annotation')\n      .transition('remove')\n      .duration(500)\n      .ease(d3.easeCubicInOut)\n      .style('opacity', 0)\n      .on('end', (d, i, g) => {\n        svg.selectAll('g.intermediate-layer-overlay, g.intermediate-layer-annotation').remove();\n        svg.selectAll('defs.overlay-gradient').remove();\n        svg.select('.input-annotation').classed('hidden', false);\n      });\n\n    // Turn the fade out nodes back\n    svg.select(`g#cnn-layer-group-${layerIndex}`)\n      .selectAll('g.node-group')\n      .each((sd, si, sg) => {\n        d3.select(sg[si])\n          .style('pointer-events', 'all');\n    });\n\n    svg.select(`g#cnn-layer-group-${layerIndex - 1}`)\n      .selectAll('g.node-group')\n      .each((sd, si, sg) => {\n        // Recover the old events\n        d3.select(sg[si])\n          .style('pointer-events', 'all')\n          .on('mouseover', nodeMouseOverHandler)\n          .on('mouseleave', nodeMouseLeaveHandler)\n          .on('click', nodeClickHandler);\n    });\n\n    // Deselect the node\n    selectedNode.layerName = '';\n    selectedNode.index = -1;\n    selectedNode.data = null;\n\n    actPoolDetailViewLayerIndex = -1;\n  }\n\n  const actPoolDetailViewPreNodeMouseOverHandler = (d, i, g) => {\n    // Highlight the edges\n    let layerIndex = layerIndexDict[d.layerName];\n    let nodeIndex = d.index;\n    let edgeGroup = svg.select('g.cnn-group').select('g.edge-group');\n    \n    edgeGroup.selectAll(`path.edge-${actPoolDetailViewLayerIndex}-${nodeIndex}`)\n      .raise()\n      .transition()\n      .ease(d3.easeCubicInOut)\n      .duration(400)\n      .style('stroke', edgeHoverColor)\n      .style('stroke-width', '1')\n      .style('opacity', 1);\n    \n    // Highlight its border\n    d3.select(g[i]).select('rect.bounding')\n      .classed('hidden', false);\n    \n    // Highlight node's pair\n    let associatedLayerIndex = layerIndex - 1;\n    if (layerIndex === actPoolDetailViewLayerIndex - 1) {\n      associatedLayerIndex = layerIndex + 1;\n    }\n\n    svg.select(`g#layer-${associatedLayerIndex}-node-${nodeIndex}`)\n      .select('rect.bounding')\n      .classed('hidden', false);\n  }\n\n  const actPoolDetailViewPreNodeMouseLeaveHandler = (d, i, g) => {\n    // De-highlight the edges\n    let layerIndex = layerIndexDict[d.layerName];\n    let nodeIndex = d.index;\n    let edgeGroup = svg.select('g.cnn-group').select('g.edge-group');\n\n    edgeGroup.selectAll(`path.edge-${actPoolDetailViewLayerIndex}-${nodeIndex}`)\n      .transition()\n      .ease(d3.easeCubicOut)\n      .duration(200)\n      .style('stroke', edgeInitColor)\n      .style('stroke-width', edgeStrokeWidth)\n      .style('opacity', edgeOpacity);\n    \n    // De-highlight its border\n    d3.select(g[i]).select('rect.bounding')\n      .classed('hidden', true);\n    \n    // De-highlight node's pair\n    let associatedLayerIndex = layerIndex - 1;\n    if (layerIndex === actPoolDetailViewLayerIndex - 1) {\n      associatedLayerIndex = layerIndex + 1;\n    }\n\n    svg.select(`g#layer-${associatedLayerIndex}-node-${nodeIndex}`)\n      .select('rect.bounding')\n      .classed('hidden', true);\n  }\n\n  const actPoolDetailViewPreNodeClickHandler = (d, i, g) => {\n    let layerIndex = layerIndexDict[d.layerName];\n    let nodeIndex = d.index;\n\n    // Click the pre-layer node in detail view has the same effect as clicking\n    // the cur-layer node, which is to open a new detail view window\n    svg.select(`g#layer-${layerIndex + 1}-node-${nodeIndex}`)\n      .node()\n      .dispatchEvent(new Event('click'));\n  }\n\n  const enterDetailView = (curLayerIndex, i) => {\n    isInActPoolDetailView = true;\n    actPoolDetailViewNodeIndex = i;\n    actPoolDetailViewLayerIndex = curLayerIndex;\n\n    // Dynamically position the detail view\n    let wholeSvg = d3.select('#cnn-svg');\n    let svgYMid = +wholeSvg.style('height').replace('px', '') / 2;\n    let svgWidth = +wholeSvg.style('width').replace('px', '');\n    let detailViewTop = 100 + svgYMid - 260 / 2;\n\n    let posX = 0;\n    if (curLayerIndex > 5) {\n      posX = nodeCoordinate[curLayerIndex - 1][0].x + 50;\n      posX = posX / 2 - 500 / 2;\n    } else {\n      posX = (svgWidth - nodeCoordinate[curLayerIndex][0].x - nodeLength) / 2;\n      posX = nodeCoordinate[curLayerIndex][0].x + nodeLength + posX - 500 / 2;\n\n    }\n\n    const detailview = document.getElementById('detailview');\n    detailview.style.top = `${detailViewTop}px`;\n    detailview.style.left = `${posX}px`;\n    detailview.style.position = 'absolute';\n\n    // Hide all edges\n    let unimportantEdges = svg.select('g.edge-group')\n      .selectAll('.edge')\n      .filter(d => {\n        return d.targetLayerIndex !== curLayerIndex;\n      })\n      .style('visibility', 'hidden');\n    \n    // Disable UI\n    disableControl = true;\n    \n    // Hide input annotaitons\n    svg.select('.input-annotation')\n      .classed('hidden', true);\n\n    // Hide legends\n    svg.selectAll(`.${selectedScaleLevel}-legend`)\n      .classed('hidden', true);\n    svg.selectAll('.input-legend').classed('hidden', true);\n    svg.selectAll('.output-legend').classed('hidden', true);\n    svg.select(`#${layerLegendDict[curLayerIndex][selectedScaleLevel]}`)\n      .classed('hidden', false);\n\n    // Add overlay rects\n    let leftX = nodeCoordinate[curLayerIndex - 1][i].x;\n    // +5 to cover the detailed mode long label\n    let rightStart = nodeCoordinate[curLayerIndex][i].x + nodeLength + 5;\n\n    // Compute the left and right overlay rect width\n    let rightWidth = width - rightStart - overlayRectOffset / 2;\n    let leftWidth = leftX - nodeCoordinate[0][0].x;\n\n    // The overlay rects should be symmetric\n    if (rightWidth > leftWidth) {\n      let stops = [{offset: '0%', color: 'rgb(250, 250, 250)', opacity: 0.85},\n        {offset: '50%', color: 'rgb(250, 250, 250)', opacity: 0.9},\n        {offset: '100%', color: 'rgb(250, 250, 250)', opacity: 1}];\n      addOverlayGradient('overlay-gradient-right', stops);\n      \n      let leftEndOpacity = 0.85 + (0.95 - 0.85) * (leftWidth / rightWidth);\n      stops = [{offset: '0%', color: 'rgb(250, 250, 250)', opacity: leftEndOpacity},\n        {offset: '100%', color: 'rgb(250, 250, 250)', opacity: 0.85}];\n      addOverlayGradient('overlay-gradient-left', stops);\n    } else {\n      let stops = [{offset: '0%', color: 'rgb(250, 250, 250)', opacity: 1},\n        {offset: '50%', color: 'rgb(250, 250, 250)', opacity: 0.9},\n        {offset: '100%', color: 'rgb(250, 250, 250)', opacity: 0.85}];\n      addOverlayGradient('overlay-gradient-left', stops);\n\n      let rightEndOpacity = 0.85 + (0.95 - 0.85) * (rightWidth / leftWidth);\n      stops = [{offset: '0%', color: 'rgb(250, 250, 250)', opacity: 0.85},\n        {offset: '100%', color: 'rgb(250, 250, 250)', opacity: rightEndOpacity}];\n      addOverlayGradient('overlay-gradient-right', stops);\n    }\n    \n    addOverlayRect('overlay-gradient-right',\n      rightStart + overlayRectOffset / 2 + 0.5,\n      0, rightWidth, height + svgPaddings.top);\n    \n    addOverlayRect('overlay-gradient-left',\n      nodeCoordinate[0][0].x - overlayRectOffset / 2,\n      0, leftWidth, height + svgPaddings.top);\n\n    svg.selectAll('rect.overlay')\n      .on('click', emptySpaceClicked);\n    \n    // Add underneath rectangles\n    let underGroup = svg.select('g.underneath');\n    let padding = 7;\n    for (let n = 0; n < cnn[curLayerIndex - 1].length; n++) {\n      underGroup.append('rect')\n        .attr('class', 'underneath-gateway')\n        .attr('id', `underneath-gateway-${n}`)\n        .attr('x', nodeCoordinate[curLayerIndex - 1][n].x - padding)\n        .attr('y', nodeCoordinate[curLayerIndex - 1][n].y - padding)\n        .attr('width', (2 * nodeLength + hSpaceAroundGap) + 2 * padding)\n        .attr('height', nodeLength + 2 * padding)\n        .attr('rx', 10)\n        .style('fill', 'rgba(160, 160, 160, 0.3)')\n        .style('opacity', 0);\n      \n      // Update the event functions for these two layers\n      svg.select(`g#layer-${curLayerIndex - 1}-node-${n}`)\n        .style('pointer-events', 'all')\n        .style('cursor', 'pointer')\n        .on('mouseover', actPoolDetailViewPreNodeMouseOverHandler)\n        .on('mouseleave', actPoolDetailViewPreNodeMouseLeaveHandler)\n        .on('click', actPoolDetailViewPreNodeClickHandler);\n    }\n    underGroup.lower();\n\n    // Highlight the selcted pair\n    underGroup.select(`#underneath-gateway-${i}`)\n      .style('opacity', 1);\n  }\n\n  const quitIntermediateView = (curLayerIndex, g, i) => {\n    // If it is the softmax detail view, quit that view first\n    if (isInSoftmax) {\n      svg.select('.logit-layer').remove();\n      svg.select('.logit-layer-lower').remove();\n      svg.selectAll('.plus-symbol-clone').remove();\n\n      // Instead of removing the paths, we hide them, so it is faster to load in\n      // the future\n      svg.select('.underneath')\n        .selectAll('.logit-lower')\n        .style('opacity', 0);\n\n      softmaxDetailViewStore.set({\n          show: false,\n          logits: []\n      })\n\n      allowsSoftmaxAnimationStore.set(false);\n    }\n    isInSoftmaxStore.set(false);\n    isInIntermediateView = false;\n\n    // Show the legend\n    svg.selectAll(`.${selectedScaleLevel}-legend`)\n      .classed('hidden', !detailedMode);\n    svg.selectAll('.input-legend').classed('hidden', !detailedMode);\n    svg.selectAll('.output-legend').classed('hidden', !detailedMode);\n\n    // Recover control panel UI\n    disableControl = false;\n\n    // Recover the input layer node's event\n    for (let n = 0; n < cnn[curLayerIndex - 1].length; n++) {\n      svg.select(`g#layer-${curLayerIndex - 1}-node-${n}`)\n        .on('mouseover', nodeMouseOverHandler)\n        .on('mouseleave', nodeMouseLeaveHandler)\n        .on('click', nodeClickHandler);\n    }\n\n    // Clean up the underneath rects\n    svg.select('g.underneath')\n      .selectAll('rect')\n      .remove();\n    detailedViewNum = undefined;\n\n    // Highlight the previous layer and this node\n    svg.select(`g#cnn-layer-group-${curLayerIndex - 1}`)\n      .selectAll('rect.bounding')\n      .style('stroke-width', 1);\n    \n    d3.select(g[i])\n      .select('rect.bounding')\n      .style('stroke-width', 1);\n\n    // Highlight the labels\n    svg.selectAll(`g#layer-label-${curLayerIndex - 1},\n      g#layer-detailed-label-${curLayerIndex - 1},\n      g#layer-label-${curLayerIndex},\n      g#layer-detailed-label-${curLayerIndex}`)\n      .style('font-weight', 'normal');\n\n    // Also unclick the node\n    // Record the current clicked node\n    selectedNode.layerName = '';\n    selectedNode.index = -1;\n    selectedNode.data = null;\n    isExitedFromCollapse = true;\n\n    // Remove the intermediate layer\n    let intermediateLayer = svg.select('g.intermediate-layer');\n\n    // Kill the infinite animation loop\n    shouldIntermediateAnimateStore.set(false);\n\n    intermediateLayer.transition('remove')\n      .duration(500)\n      .ease(d3.easeCubicInOut)\n      .style('opacity', 0)\n      .on('end', (d, i, g) => { d3.select(g[i]).remove()});\n    \n    // Remove the output node overlay mask\n    svg.selectAll('.overlay-group').remove();\n    \n    // Remove the overlay rect\n    svg.selectAll('g.intermediate-layer-overlay, g.intermediate-layer-annotation')\n      .transition('remove')\n      .duration(500)\n      .ease(d3.easeCubicInOut)\n      .style('opacity', 0)\n      .on('end', (d, i, g) => {\n        svg.selectAll('g.intermediate-layer-overlay, g.intermediate-layer-annotation').remove();\n        svg.selectAll('defs.overlay-gradient').remove();\n      });\n    \n    // Recover the layer if we have drdrawn it\n    if (needRedraw[0] !== undefined) {\n      let redrawRange = cnnLayerRanges[selectedScaleLevel][needRedraw[0]];\n      if (needRedraw[1] !== undefined) {\n        svg.select(`g#layer-${needRedraw[0]}-node-${needRedraw[1]}`)\n          .select('image.node-image')\n          .each((d, i, g) => drawOutput(d, i, g, redrawRange));\n      } else {\n        svg.select(`g#cnn-layer-group-${needRedraw[0]}`)\n          .selectAll('image.node-image')\n          .each((d, i, g) => drawOutput(d, i, g, redrawRange));\n      }\n    }\n    \n    // Move all layers to their original place\n    for (let i = 0; i < numLayers; i++) {\n      moveLayerX({layerIndex: i, targetX: nodeCoordinate[i][0].x,\n        disable:false, delay:500, opacity: 1});\n    }\n\n    moveLayerX({layerIndex: numLayers - 2,\n      targetX: nodeCoordinate[numLayers - 2][0].x, opacity: 1,\n      disable:false, delay:500, onEndFunc: () => {\n        // Show all edges on the last moving animation end\n        svg.select('g.edge-group')\n          .style('visibility', 'visible');\n\n        // Recover the input annotation\n        svg.select('.input-annotation')\n          .classed('hidden', false);\n      }});\n  }\n\n  const nodeClickHandler = (d, i, g) => {\n    d3.event.stopPropagation();\n    let nodeIndex = d.index;\n\n    // Record the current clicked node\n    selectedNode.layerName = d.layerName;\n    selectedNode.index = d.index;\n    selectedNode.data = d;\n    selectedNode.domI = i;\n    selectedNode.domG = g;\n\n    // Record data for detailed view.\n    if (d.type === 'conv' || d.type === 'relu' || d.type === 'pool') {\n      let data = [];\n      for (let j = 0; j < d.inputLinks.length; j++) {\n        data.push({\n          input: d.inputLinks[j].source.output,\n          kernel: d.inputLinks[j].weight,\n          output: d.inputLinks[j].dest.output,\n        })\n      }\n      let curLayerIndex = layerIndexDict[d.layerName];\n      data.colorRange = cnnLayerRanges[selectedScaleLevel][curLayerIndex];\n      data.isInputInputLayer = curLayerIndex <= 1;\n      nodeData = data;\n    }\n\n    let curLayerIndex = layerIndexDict[d.layerName];\n\n    if (d.type == 'relu' || d.type == 'pool') {\n      isExitedFromDetailedView = false;\n      if (!isInActPoolDetailView) {\n        // Enter the act pool detail view\n        enterDetailView(curLayerIndex, d.index);\n      } else {\n        if (d.index === actPoolDetailViewNodeIndex) {\n          // Quit the act pool detail view\n          quitActPoolDetailView();\n        } else {\n          // Switch the detail view input to the new clicked pair\n\n          // Remove the previous selection effect\n          svg.select(`g#layer-${curLayerIndex}-node-${actPoolDetailViewNodeIndex}`)\n            .select('rect.bounding')\n            .classed('hidden', true);\n\n          svg.select(`g#layer-${curLayerIndex - 1}-node-${actPoolDetailViewNodeIndex}`)\n            .select('rect.bounding')\n            .classed('hidden', true);\n          \n          let edgeGroup = svg.select('g.cnn-group').select('g.edge-group');\n      \n          edgeGroup.selectAll(`path.edge-${curLayerIndex}-${actPoolDetailViewNodeIndex}`)\n            .transition()\n            .ease(d3.easeCubicOut)\n            .duration(200)\n            .style('stroke', edgeInitColor)\n            .style('stroke-width', edgeStrokeWidth)\n            .style('opacity', edgeOpacity);\n          \n          let underGroup = svg.select('g.underneath');\n          underGroup.select(`#underneath-gateway-${actPoolDetailViewNodeIndex}`)\n            .style('opacity', 0);\n        \n          // Add selection effect on the new selected pair\n          svg.select(`g#layer-${curLayerIndex}-node-${nodeIndex}`)\n            .select('rect.bounding')\n            .classed('hidden', false);\n\n          svg.select(`g#layer-${curLayerIndex - 1}-node-${nodeIndex}`)\n            .select('rect.bounding')\n            .classed('hidden', false);\n\n          edgeGroup.selectAll(`path.edge-${curLayerIndex}-${nodeIndex}`)\n            .raise()\n            .transition()\n            .ease(d3.easeCubicInOut)\n            .duration(400)\n            .style('stroke', edgeHoverColor)\n            .style('stroke-width', '1')\n            .style('opacity', 1);\n\n          underGroup.select(`#underneath-gateway-${nodeIndex}`)\n            .style('opacity', 1);\n\n          actPoolDetailViewNodeIndex = nodeIndex;\n        }\n      }\n    }\n\n    // Enter the second view (layer-view) when user clicks a conv node\n    if ((d.type === 'conv' || d.layerName === 'output'  || d.type === 'fc') && !isInIntermediateView) {\n      prepareToEnterIntermediateView(d, g, nodeIndex, curLayerIndex);\n\n      if (d.layerName === 'conv2d_22') {\n        drawConv1(curLayerIndex, d, nodeIndex, width, height,\n          intermediateNodeMouseOverHandler, intermediateNodeMouseLeaveHandler,\n          intermediateNodeClicked);\n      }\n\n      else if (d.layerName === 'conv_1_2') {\n        drawConv2(curLayerIndex, d, nodeIndex, width, height,\n          intermediateNodeMouseOverHandler, intermediateNodeMouseLeaveHandler,\n          intermediateNodeClicked);\n      }\n\n      else if (d.layerName === 'conv2d_23') {\n        drawConv3(curLayerIndex, d, nodeIndex, width, height,\n          intermediateNodeMouseOverHandler, intermediateNodeMouseLeaveHandler,\n          intermediateNodeClicked);\n      }\n      \n      else if (d.layerName === 'conv_2_2') {\n        drawConv4(curLayerIndex, d, nodeIndex, width, height,\n          intermediateNodeMouseOverHandler, intermediateNodeMouseLeaveHandler,\n          intermediateNodeClicked);\n      }\n\n      else if (d.layerName === 'dense_22') {\n        drawFlatten(curLayerIndex, d, nodeIndex, width, height);\n      }\n\n      else if(d.layerName === 'output') {\n        drawOutFlatten(curLayerIndex, d, nodeIndex, width, height);\n      }\n    }\n    // Quit the layerview\n    else if ((d.type === 'conv' || d.layerName === 'output') && isInIntermediateView) {\n      quitIntermediateView(curLayerIndex, g, i);\n    }\n  }\n\n  const nodeMouseOverHandler = (d, i, g) => {\n    // if (isInIntermediateView || isInActPoolDetailView) { return; }\n    if (isInIntermediateView) { return; }\n\n    // Highlight the edges\n    let layerIndex = layerIndexDict[d.layerName];\n    let nodeIndex = d.index;\n    let edgeGroup = svg.select('g.cnn-group').select('g.edge-group');\n    \n    edgeGroup.selectAll(`path.edge-${layerIndex}-${nodeIndex}`)\n      .raise()\n      .transition()\n      .ease(d3.easeCubicInOut)\n      .duration(400)\n      .style('stroke', edgeHoverColor)\n      .style('stroke-width', '1')\n      .style('opacity', 1);\n    \n    // Highlight its border\n    d3.select(g[i]).select('rect.bounding')\n      .classed('hidden', false);\n    d3.select(g[i]).select('circle.bounding')\n      .classed('hidden', false);\n    \n    // Highlight source's border\n    if (d.inputLinks.length === 1) {\n      let link = d.inputLinks[0];\n      let layerIndex = layerIndexDict[link.source.layerName];\n      let nodeIndex = link.source.index;\n      svg.select(`g#layer-${layerIndex}-node-${nodeIndex}`)\n        .select('rect.bounding')\n        .classed('hidden', false);\n      svg.select(`g#layer-${layerIndex}-node-${nodeIndex}`)\n        .select('circle.bounding')\n        .classed('hidden', false);\n    } else {\n      svg.select(`g#cnn-layer-group-${layerIndex - 1}`)\n        .selectAll('g.node-group')\n        .selectAll('rect.bounding')\n        .classed('hidden', false);\n      svg.select(`g#cnn-layer-group-${layerIndex - 1}`)\n        .selectAll('g.node-group')\n        .selectAll('circle.bounding')\n        .classed('hidden', false);\n    }\n\n    // Highlight the output text\n    if (d.layerName === 'output') {\n      d3.select(g[i])\n        .select('.output-text')\n        .style('opacity', 0.8)\n        .style('text-decoration', 'underline');\n    }\n\n    /* Use the following commented code if we have non-linear model\n    d.inputLinks.forEach(link => {\n      let layerIndex = layerIndexDict[link.source.layerName];\n      let nodeIndex = link.source.index;\n      svg.select(`g#layer-${layerIndex}-node-${nodeIndex}`)\n        .select('rect.bounding')\n        .classed('hidden', false);\n    });\n    */\n  }\n\n  const nodeMouseLeaveHandler = (d, i, g) => {\n    // Screenshot\n    // return;\n\n    if (isInIntermediateView) { return; }\n    \n    // Keep the highlight if user has clicked\n    if (isInActPoolDetailView || (\n      d.layerName !== selectedNode.layerName ||\n      d.index !== selectedNode.index)){\n      let layerIndex = layerIndexDict[d.layerName];\n      let nodeIndex = d.index;\n      let edgeGroup = svg.select('g.cnn-group').select('g.edge-group');\n      \n      edgeGroup.selectAll(`path.edge-${layerIndex}-${nodeIndex}`)\n        .transition()\n        .ease(d3.easeCubicOut)\n        .duration(200)\n        .style('stroke', edgeInitColor)\n        .style('stroke-width', edgeStrokeWidth)\n        .style('opacity', edgeOpacity);\n\n      d3.select(g[i]).select('rect.bounding').classed('hidden', true);\n      d3.select(g[i]).select('circle.bounding').classed('hidden', true);\n\n      if (d.inputLinks.length === 1) {\n        let link = d.inputLinks[0];\n        let layerIndex = layerIndexDict[link.source.layerName];\n        let nodeIndex = link.source.index;\n        svg.select(`g#layer-${layerIndex}-node-${nodeIndex}`)\n          .select('rect.bounding')\n          .classed('hidden', true);\n        svg.select(`g#layer-${layerIndex}-node-${nodeIndex}`)\n          .select('circle.bounding')\n          .classed('hidden', true);\n      } else {\n        svg.select(`g#cnn-layer-group-${layerIndex - 1}`)\n          .selectAll('g.node-group')\n          .selectAll('rect.bounding')\n          .classed('hidden', d => d.layerName !== selectedNode.layerName ||\n            d.index !== selectedNode.index);\n        svg.select(`g#cnn-layer-group-${layerIndex - 1}`)\n          .selectAll('g.node-group')\n          .selectAll('circle.bounding')\n          .classed('hidden', d => d.layerName !== selectedNode.layerName ||\n            d.index !== selectedNode.index);\n      }\n\n      // Dehighlight the output text\n      if (d.layerName === 'output') {\n        d3.select(g[i])\n          .select('.output-text')\n          .style('fill', 'black')\n          .style('opacity', 0.5)\n          .style('text-decoration', 'none');\n      }\n\n      /* Use the following commented code if we have non-linear model\n      d.inputLinks.forEach(link => {\n        let layerIndex = layerIndexDict[link.source.layerName];\n        let nodeIndex = link.source.index;\n        svg.select(`g#layer-${layerIndex}-node-${nodeIndex}`)\n          .select('rect.bounding')\n          .classed('hidden', true);\n      });\n      */\n    }\n  }\n  let logits = [-4.28, 2.96, -0.38, 5.24, -7.56, -3.43, 8.63, 2.63, 6.30, 0.68];\n  let selectedI = 4;\n\n  onMount(async () => {\n    // Create SVG\n    wholeSvg = d3.select(overviewComponent)\n      .select('#cnn-svg');\n    svg = wholeSvg.append('g')\n      .attr('class', 'main-svg')\n      .attr('transform', `translate(${svgPaddings.left}, 0)`);\n    svgStore.set(svg);\n\n    width = Number(wholeSvg.style('width').replace('px', '')) -\n      svgPaddings.left - svgPaddings.right;\n    height = Number(wholeSvg.style('height').replace('px', '')) -\n      svgPaddings.top - svgPaddings.bottom;\n\n    let cnnGroup = svg.append('g')\n      .attr('class', 'cnn-group');\n    \n    let underGroup = svg.append('g')\n      .attr('class', 'underneath');\n\n    let svgYMid = +wholeSvg.style('height').replace('px', '') / 2;\n    detailedViewAbsCoords = {\n      1 : [600, 100 + svgYMid - 220 / 2, 490, 290],\n      2: [500, 100 + svgYMid - 220 / 2, 490, 290],\n      3 : [700, 100 + svgYMid - 220 / 2, 490, 290],\n      4: [600, 100 + svgYMid - 220 / 2, 490, 290],\n      5: [650, 100 + svgYMid - 220 / 2, 490, 290],\n      6 : [850, 100 + svgYMid - 220 / 2, 490, 290],\n      7 : [100, 100 + svgYMid - 220 / 2, 490, 290],\n      8 : [60, 100 + svgYMid - 220 / 2, 490, 290],\n      9 : [200, 100 + svgYMid - 220 / 2, 490, 290],\n      10 : [300, 100 + svgYMid - 220 / 2, 490, 290],\n    }\n    \n    // Define global arrow marker end\n    svg.append(\"defs\")\n      .append(\"marker\")\n      .attr(\"id\", 'marker')\n      .attr(\"viewBox\", \"0 -5 10 10\")\n      .attr(\"refX\", 6)\n      .attr(\"refY\", 0)\n      .attr(\"markerWidth\", 6)\n      .attr(\"markerHeight\", 6)\n      .attr(\"orient\", \"auto\")\n      .append(\"path\")\n      .style('stroke-width', 1.2)\n      .style('fill', 'gray')\n      .style('stroke', 'gray')\n      .attr(\"d\", \"M0,-5L10,0L0,5\");\n\n    // Alternative arrow head style for non-interactive annotation\n    svg.append(\"defs\")\n      .append(\"marker\")\n      .attr(\"id\", 'marker-alt')\n      .attr(\"viewBox\", \"0 -5 10 10\")\n      .attr(\"refX\", 6)\n      .attr(\"refY\", 0)\n      .attr(\"markerWidth\", 6)\n      .attr(\"markerHeight\", 6)\n      .attr(\"orient\", \"auto\")\n      .append(\"path\")\n      .style('fill', 'none')\n      .style('stroke', 'gray')\n      .style('stroke-width', 2)\n      .attr(\"d\", \"M-5,-10L10,0L-5,10\");\n    \n    console.time('Construct cnn');\n    model = await loadTrainedModel('PUBLIC_URL/assets/data/model.json');\n    cnn = await constructCNN(`PUBLIC_URL/assets/img/${selectedImage}`, model);\n    console.timeEnd('Construct cnn');\n    \n\n    // Ignore the flatten layer for now\n    let flatten = cnn[cnn.length - 3];\n    cnn.splice(cnn.length - 3, 1);\n    cnn.flatten = flatten;\n    console.log(cnn);\n    cnnStore.set(cnn);\n    updateCNNLayerRanges();\n\n    // Create and draw the CNN view\n    drawCNN(width, height, cnnGroup, nodeMouseOverHandler,\n      nodeMouseLeaveHandler, nodeClickHandler);\n  })\n\n  const detailedButtonClicked = () => {\n    detailedMode = !detailedMode;\n    detailedModeStore.set(detailedMode);\n\n    if (!isInIntermediateView){\n      // Show the legend\n      svg.selectAll(`.${selectedScaleLevel}-legend`)\n        .classed('hidden', !detailedMode);\n      \n      svg.selectAll('.input-legend').classed('hidden', !detailedMode);\n      svg.selectAll('.output-legend').classed('hidden', !detailedMode);\n    }\n    \n    // Switch the layer name\n    svg.selectAll('.layer-detailed-label')\n      .classed('hidden', !detailedMode);\n    \n    svg.selectAll('.layer-label')\n      .classed('hidden', detailedMode);\n  }\n\n  const imageOptionClicked = async (e) => {\n    let newImageName = d3.select(e.target).attr('data-imageName');\n\n    if (newImageName !== selectedImage) {\n      selectedImage = newImageName;\n\n      // Re-compute the CNN using the new input image\n      cnn = await constructCNN(`PUBLIC_URL/assets/img/${selectedImage}`, model);\n\n\n      // Ignore the flatten layer for now\n      let flatten = cnn[cnn.length - 3];\n      cnn.splice(cnn.length - 3, 1);\n      cnn.flatten = flatten;\n      cnnStore.set(cnn);\n\n      // Update all scales used in the CNN view\n      updateCNNLayerRanges();\n      updateCNN();\n    }\n  }\n\n  const customImageClicked = () => {\n\n    // Case 1: there is no custom image -> show the modal to get user input\n    if (customImageURL === null) {\n      modalInfo.show = true;\n      modalInfo.preImage = selectedImage;\n      modalStore.set(modalInfo);\n    }\n\n    // Case 2: there is an existing custom image, not the focus -> switch to this image\n    else if (selectedImage !== 'custom') {\n      let fakeEvent = {detail: {url: customImageURL}};\n      handleCustomImage(fakeEvent);\n    }\n\n    // Case 3: there is an existing custom image, and its the focus -> let user\n    // upload a new image\n    else {\n      modalInfo.show = true;\n      modalInfo.preImage = selectedImage;\n      modalStore.set(modalInfo);\n    }\n\n    if (selectedImage !== 'custom') {\n      selectedImage = 'custom';\n    }\n\n  }\n\n  const handleModalCanceled = (event) => {\n    // User cancels the modal without a successful image, so we restore the\n    // previous selected image as input\n    selectedImage = event.detail.preImage;\n  }\n\n  const handleCustomImage = async (event) => {\n    // User gives a valid image URL\n    customImageURL = event.detail.url;\n\n    // Re-compute the CNN using the new input image\n    cnn = await constructCNN(customImageURL, model);\n\n    // Ignore the flatten layer for now\n    let flatten = cnn[cnn.length - 2];\n    cnn.splice(cnn.length - 2, 1);\n    cnn.flatten = flatten;\n    cnnStore.set(cnn);\n\n    // Update the UI\n    let customImageSlot = d3.select(overviewComponent)\n      .select('.custom-image').node();\n    drawCustomImage(customImageSlot, cnn[0]);\n\n    // Update all scales used in the CNN view\n    updateCNNLayerRanges();\n    updateCNN();\n  }\n\n  function handleExitFromDetiledConvView(event) {\n    if (event.detail.text) {\n      detailedViewNum = undefined;\n      svg.select(`rect#underneath-gateway-${selectedNodeIndex}`)\n        .style('opacity', 0);\n      selectedNodeIndex = -1; \n    }\n  }\n\n  function handleExitFromDetiledPoolView(event) {\n    if (event.detail.text) {\n      quitActPoolDetailView();\n      isExitedFromDetailedView = true;\n    }\n  }\n\n  function handleExitFromDetiledActivationView(event) {\n    if (event.detail.text) {\n      quitActPoolDetailView();\n      isExitedFromDetailedView = true;\n    }\n  }\n\n  function handleExitFromDetiledSoftmaxView(event) {\n    softmaxDetailViewInfo.show = false;\n    softmaxDetailViewStore.set(softmaxDetailViewInfo);\n  }\n\n</script>\n\n<style>\n  .overview {\n    padding: 0;\n    height: 100%;\n    width: 100%;\n    display: flex;\n    position: relative;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: flex-start;\n  }\n\n  .control-container {\n    padding: 5px 20px;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: 100%;\n  }\n\n  .right-control {\n    display: flex;\n  }\n\n  .left-control {\n    display: flex;\n    align-items: center;\n  }\n\n  .control > .select > #level-select {\n    padding-left: 2em;\n    padding-right: 2em;\n  }\n\n  .cnn {\n    width: 100%;\n    padding: 0;\n    background: var(--light-gray);\n    display: flex;\n  }\n\n  svg {\n    margin: 0 auto;\n    min-height: 490px;\n    max-height: 700px;\n    height: calc(100vh - 100px);\n    width: 100vw;\n  }\n\n  .is-very-small {\n    font-size: 12px;\n  }\n\n  #detailed-button {\n    margin-right: 10px;\n    color: #dbdbdb;\n    transition: border-color 300ms ease-in-out, color 200ms ease-in-out;\n  }\n\n  #detailed-button.is-activated, #detailed-button.is-activated:hover {\n    color: #3273dc;\n    border-color: #3273dc;\n  }\n\n  #detailed-button:hover {\n    color: #b5b5b5;\n  }\n\n  #hover-label {\n    transition: opacity 300ms ease-in-out;\n    text-overflow: ellipsis;\n    pointer-events: none;\n    margin-left: 5px;\n  }\n\n  .image-container {\n    width: 40px;\n    height: 40px;\n    border-radius: 4px;\n    display: inline-block;\n    position: relative;\n    border: 2.5px solid #1E1E1E;\n    margin-right: 10px;\n    cursor: pointer;\n    pointer-events: all;\n    transition: border 300ms ease-in-out;\n  }\n\n  .image-container img {\n    object-fit: cover;\n    max-width: 100%;\n    max-height: 100%;\n    z-index: -1;\n    transition: opacity 300ms ease-in-out;\n  }\n\n  .image-container.inactive {\n    border: 2.5px solid rgb(220, 220, 220);\n  }\n\n  .image-container.inactive > img {\n    opacity: 0.3;\n  }\n\n  .image-container.inactive:hover > img {\n    opacity: 0.6;\n  }\n\n  .image-container.inactive.disabled {\n    border: 2.5px solid rgb(220, 220, 220);\n    cursor: not-allowed;\n  }\n\n  .image-container.inactive.disabled:hover {\n    border: 2.5px solid rgb(220, 220, 220);\n    cursor: not-allowed;\n  }\n\n  .image-container.inactive.disabled > img {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n\n  .image-container.inactive.disabled:hover > img {\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n\n  .image-container.inactive > .edit-icon {\n    color: #BABABA;\n  }\n\n  .image-container.inactive:hover > .edit-icon {\n    color: #777777;\n  }\n\n  .image-container.inactive:hover {\n    border: 2.5px solid #1E1E1E;\n  }\n\n  .edit-icon {\n    position: absolute;\n    bottom: -6px;\n    right: -7px;\n    font-size: 7px;\n    color: #1E1E1E;\n    transition: color 300ms ease-in-out;\n  }\n\n  :global(canvas) {\n    image-rendering: crisp-edges;\n  }\n\n  :global(.layer-label, .layer-detailed-label, .layer-intermediate-label) {\n    font-size: 12px;\n    opacity: 0.8;\n    text-anchor: middle;\n  }\n\n  :global(.colorLegend) {\n    font-size: 10px;\n  }\n\n  :global(.legend) {\n    transition: opacity 400ms ease-in-out;\n  }\n\n  :global(.legend > rect) {\n    opacity: 1;\n  }\n\n  :global(.legend text, .legend line, .legend path) {\n    opacity: 0.7;\n  }\n\n  :global(.legend#output-legend > rect) {\n    opacity: 1;\n  }\n\n  :global(.hidden) {\n    opacity: 0;\n    pointer-events: none;\n  }\n\n  :global(.very-strong) {\n    stroke-width: 3px;\n  }\n\n  :global(.bounding, .edge, .edge-group, foreignObject, .bounding-flatten,\n    .underneath-gateway, .input-annotation) {\n    transition: opacity 300ms ease-in-out;\n  }\n\n  :global(rect.bounding) {\n    transition: stroke-width 800ms ease-in-out, opacity 300ms ease-in-out;\n  }\n\n  :global(.annotation-text) {\n    pointer-events: none;\n    font-size: 10px;\n    font-style: italic;\n    fill: gray;\n  }\n\n  /* Change the cursor style on the detailed view input and output matrices */\n  :global(rect.square) {\n    cursor: crosshair;\n  }\n\n  :global(.animation-control-button) {\n    font-family: FontAwesome;\n    opacity: 0.8;\n    cursor: pointer;\n  }\n\n</style>\n\n<div class=\"overview\"\n  bind:this={overviewComponent}>\n\n  <div class=\"control-container\">\n\n    <div class=\"left-control\">\n      {#each imageOptions as image, i}\n        <div class=\"image-container\"\n          on:click={disableControl ? () => {} : imageOptionClicked}\n          class:inactive={selectedImage !== image.file}\n          class:disabled={disableControl}\n          data-imageName={image.file}>\n          <img src=\"PUBLIC_URL/assets/img/{image.file}\"\n            alt=\"image option\"\n            title=\"{image.class}\"\n            data-imageName={image.file}/>\n        </div>\n      {/each}\n\n      <!-- The plus button -->\n        <div class=\"image-container\"\n          class:inactive={selectedImage !== 'custom'}\n          class:disabled={disableControl}\n          data-imageName={'custom'}\n          on:click={disableControl ? () => {} : customImageClicked}>\n\n          <img class=\"custom-image\"\n            src=\"PUBLIC_URL/assets/img/plus.svg\"\n            alt=\"plus button\"\n            title=\"Add new input image\"\n            data-imageName=\"custom\"/>\n\n          <span class=\"fa-stack edit-icon\"\n            class:hidden={customImageURL === null}>\n            <i class=\"fas fa-circle fa-stack-2x\"></i>\n            <i class=\"fas fa-pen fa-stack-1x fa-inverse\"></i>\n          </span>\n\n        </div>\n\n      <button class=\"button is-very-small is-link is-light\"\n        id=\"hover-label\"\n        style=\"opacity:{hoverInfo.show ? 1 : 0}\">\n        <span class=\"icon\" style=\"margin-right: 5px;\">\n          <i class=\"fas fa-crosshairs \"></i>\n        </span>\n        <span id=\"hover-label-text\">\n          {hoverInfo.text}\n        </span>\n      </button>\n    </div>\n\n    <!-- <div class=\"right-control\">\n\n      <button class=\"button is-very-small\"\n        id=\"detailed-button\"\n        disabled={disableControl}\n        class:is-activated={detailedMode}\n        on:click={detailedButtonClicked}>\n        <span class=\"icon\">\n          <i class=\"fas fa-eye\"></i>\n        </span>\n        <span id=\"hover-label-text\">\n          Show detail\n        </span>\n      </button>\n\n      <div class=\"control is-very-small has-icons-left\"\n        title=\"Change color scale range\">\n        <span class=\"icon is-left\">\n          <i class=\"fas fa-palette\"></i>\n        </span>\n\n        <div class=\"select\">\n          <select bind:value={selectedScaleLevel} id=\"level-select\"\n            disabled={disableControl}>\n            <option value=\"local\">Unit</option>\n            <option value=\"module\">Module</option>\n            <option value=\"global\">Global</option>\n          </select>\n        </div>\n      </div>\n\n    </div> -->\n    \n  </div>\n\n  <div class=\"cnn\">\n    <svg id=\"cnn-svg\"></svg>\n  </div>\n</div>\n\n<!-- <Article/> -->\n\n<div id='detailview'>\n  {#if selectedNode.data && selectedNode.data.type === 'conv' && selectedNodeIndex != -1}\n    <ConvolutionView on:message={handleExitFromDetiledConvView} input={nodeData[selectedNodeIndex].input} \n                      kernel={nodeData[selectedNodeIndex].kernel}\n                      dataRange={nodeData.colorRange}\n                      colorScale={nodeData.inputIsInputLayer ?\n                        layerColorScales.input[0] : layerColorScales.conv}\n                      isInputInputLayer={nodeData.inputIsInputLayer}\n                      isExited={isExitedFromCollapse}/>\n  {:else if selectedNode.data && selectedNode.data.type === 'relu'}\n    <ActivationView on:message={handleExitFromDetiledActivationView} input={nodeData[0].input} \n                    output={nodeData[0].output}\n                    dataRange={nodeData.colorRange}\n                    isExited={isExitedFromDetailedView}/>\n  {:else if selectedNode.data && selectedNode.data.type === 'pool'}\n    <PoolView on:message={handleExitFromDetiledPoolView} input={nodeData[0].input} \n              kernelLength={2}\n              dataRange={nodeData.colorRange}\n              isExited={isExitedFromDetailedView}/>\n  {:else if softmaxDetailViewInfo.show}\n    <SoftmaxView logits={softmaxDetailViewInfo.logits}\n                 logitColors={softmaxDetailViewInfo.logitColors}\n                 selectedI={softmaxDetailViewInfo.selectedI}\n                 highlightI={softmaxDetailViewInfo.highlightI}\n                 outputName={softmaxDetailViewInfo.outputName}\n                 outputValue={softmaxDetailViewInfo.outputValue}\n                 startAnimation={softmaxDetailViewInfo.startAnimation}\n                 on:xClicked={handleExitFromDetiledSoftmaxView}\n                 on:mouseOver={softmaxDetailViewMouseOverHandler}\n                 on:mouseLeave={softmaxDetailViewMouseLeaveHandler}/>\n  {/if}\n</div>\n\n<Modal on:xClicked={handleModalCanceled}\n  on:urlTyped={handleCustomImage}/>",
    "<script>\n  import Overview from \"../overview/Overview.svelte\";\n  import Article from \"../article/article.svelte\";\n  import { cnnStore } from \"../stores.js\";\n  import { link } from \"svelte-spa-router\";\n\n  // Enum to control the displaying view\n  const View = {\n    OVERVIEW: \"overview\",\n    LAYERVIEW: \"layerview\",\n    DETAILVIEW: \"detailview\"\n  };\n\n  let mainView = View.OVERVIEW;\n\n  /* Example to read loaded cnn in other components:\n  $: if ( $cnnStore.length != 0) {\n    console.log($cnnStore);\n  }\n  */\n</script>\n\n<style>\n  #article{\n    border-bottom: solid 2px rgb(211, 208, 208);\n  }\n  #explainer {\n    width: 100%;\n    padding: 0;\n    margin: auto;\n    /* outline: 1px solid var(--g-dark-gray); */\n  }\n  #foot{\n    margin-left: auto;\n    margin-right: auto;\n    max-width: 78ch;\n    position:relative;\n    border-top: solid 1px #eee;\n  }\n  #foot .lasttext p{\n    padding-top: 10px;\n    font-style: italic;\n    font-size: 18px;\n    color: rgb(226, 195, 90);\n  }\n  #foot .addition p{\n    padding-top: 0px;\n    font-size: 20px;\n  }\n  .return {\n    position: absolute;\n    right: -300px;\n    top: 80%;\n    font-size: 20px;\n    font-style: italic;\n    color: steelblue;\n  }\n  .title{\n    padding-top: 20px;\n    padding-bottom: 0px;\n    font-style: italic;\n    color: steelblue;\n    font-size: 30px;\n  }\n</style>\n<div id=\"article\">\n  <Article />\n</div>\n<div id=\"explainer\">\n  <Overview />\n</div>\n<footer id=\"foot\">\n    <p class='title'><b>扩展与补充</b></p>\n    <div class=\"addition\">\n      <p>待补充</p>\n    </div>\n    <div class=\"lasttext\">\n      <p>待补充</p>\n    </div>\n    <a href=\"/\" use:link rel=\"prefetch\">\n        <div class=\"return\">返回</div>\n    </a>\n</footer>",
    "<script>\n  export let input1 ;\n  export let input2 ;\n  export let weight1 ;\n  export let weight2 ;\n  let output ;\n\n  import { createEventDispatcher } from 'svelte';\n  import Graph1Dataview from './Graph1_Dataview.svelte';\n  \n  const dispatch = createEventDispatcher();\n\n  function calculate(){\n    output  = input1 * weight1 + input2 * weight2;\n  }\n  function handleMouseover(event) {\n    let outputMappings = generateOutputMappings(stride, output, kernel.length, image.length, dilation);\n    outputHighlights = array1d(output.length * output.length, (i) => false);\n    const animatedH = event.detail.hoverH;\n    const animatedW = event.detail.hoverW;\n    outputHighlights[animatedH * output.length + animatedW] = true;\n    inputHighlights = compute_input_multiplies_with_weight(animatedH, animatedW, image.length, kernel.length, outputMappings, kernel.length)\n    isPaused = true;\n    dispatch('message', {\n      text: isPaused\n    });\n  }\n</script>\n\n<style>\n  .wrapper {\n    display: flex;\n    flex-direction: row;\n    align-items: flex-end;\n  }\n\n  .column {\n    padding: 5px 10px 10px 10px;\n  }\n\n  .header-text {\n    line-height: 1.1;\n  }\n</style>\n\n<div class=\"wrapper\">\n  <div class=\"column has-text-centered\">\n    <div class=\"header-text\">\n      2 inputs and 1 output<br/>\n    </div>\n    <Graph1Dataview on:message={handleMouseover}  input1={input1} input2={input2} weight1={weight1}\n            weight2={weight2} output={output}/>\n    <p>output:{output}</p>\n    <button on:click={calculate}>new output</button>\n  </div>\n</div>",
    "<script>\n  import Graph1Animator from './Graph1_Animator.svelte';\n  let inputNode1 ;\n  let inputNode2 ;\n  let weight_1 ;\n  let weight_2 ;\n\n  function handleClickPause() {\n    isPaused = !isPaused;\n  }\n\n  function handlePauseFromInteraction(event) {\n    isPaused = event.detail.text;\n  }\n\n</script>\n\n<style>\n  .control-button {\n    position: absolute;\n    top: 5px;\n    right: 15px;\n    color: gray;\n    font-size: 22px;\n    opacity: 0.4;\n    cursor: pointer;\n  }\n\n  .control-button:hover {\n    opacity: 0.8;\n  }\n\n  .box {\n    padding: 5px 30px 20px 30px;\n    position: relative;\n  }\n\n  .left-part {\n    display: flex;\n    flex-direction: column;\n    margin-top: 30px;\n  }\n\n  .right-part {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .content-container {\n    display: flex;\n    justify-content: space-around;\n  }\n\n  .field {\n    padding-top: 5px;\n  }\n\n  .annotation {\n    display: flex;\n    align-items: center;\n    padding-left : 10px;\n  }\n\n  .annotation-text-hyper {\n    font-size: 15px;\n    font-style: italic;\n  }\n\n  .annotation > img {\n    width: 20px;\n    margin-right: 5px;\n  }\n\n  .is-very-small {\n    font-size: 12px; \n  }\n\n  .field {\n    align-items: center;\n  }\n\n  .field-label.is-normal {\n    padding-top: 0;\n  }\n\n  .field:not(:last-child) {\n    margin-bottom: 7px;\n  }\n\n  label {\n    display: inline-block;\n    width: 105px;\n    text-align: right;\n    font-weight: 500;\n    color: #4a4a4a;\n  } \n\n  input[type=number] {\n    width: 50px;\n  }\n\n  input[type=range] {\n    width: 160px;\n  }\n</style>\n\n<div class=\"container has-text-centered\" id=\"detailview-container\">\n  <div class=\"box\">\n\n    <div class=\"content-container\">\n      <div class=\"left-part\">\n        <div class=\"input-row\">\n          <div class=\"field is-horizontal\">\n            <div class=\"field-label is-normal\">\n              <label class=\"label\">Input Node1:</label>\n            </div>\n            <input class=\"input is-very-small\" type=\"number\" bind:value={inputNode1}>\n          </div>\n        </div>\n\n      <div class=\"input-row\">\n          <div class=\"field is-horizontal\">\n            <div class=\"field-label is-normal\">\n              <label class=\"label\">Input Node2:</label>\n            </div>\n            <input class=\"input is-very-small\" type=\"number\" bind:value={inputNode2}>\n          </div>\n        </div>\n\n        <div class=\"input-row\">\n          <div class=\"field is-horizontal\">\n            <div class=\"field-label is-normal\">\n              <label class=\"label\">Weight1:</label>\n            </div>\n            <input class=\"input is-very-small\" type=\"number\" bind:value={weight_1}>\n          </div>\n        </div>\n\n        <div class=\"input-row\">\n          <div class=\"field is-horizontal\">\n            <div class=\"field-label is-normal\">\n              <label class=\"label\">Weight2:</label>\n            </div>\n            <input class=\"input is-very-small\" type=\"number\" bind:value={weight_2}>\n          </div>\n        </div>\n\n      </div>\n\n        <div class=\"right-part\">\n          <Graph1Animator on:message={handlePauseFromInteraction} \n            input1={inputNode1} input2={inputNode2} weight1={weight_1}\n            weight2={weight_2}/>       \n        </div>\n\n    </div>\n\n  </div>\n</div>",
    "<script>\n    import { onMount } from 'svelte';\n    import { link } from \"svelte-spa-router\";\n    let outdata;\n    let sortdata;\n    var kdata;\n    const color = {\"山鸢尾\": 'red', \"杂色鸢尾\":'steelblue', \"维吉尼亚鸢尾\":'green'};\n    const en2ch = {\"Iris-setosa\": \"山鸢尾\", \"Iris-versicolor\":\"杂色鸢尾\", \"Iris-virginica\":\"维吉尼亚鸢尾\"};\n    const arrcolor = ['red', 'steelblue', 'green'];\n    const labels = [\"山鸢尾\", \"杂色鸢尾\", \"维吉尼亚鸢尾\"];\n    const margin = {top: 20, right: 10, bottom: 10, left: 40};\n    const height = 280;\n    const width = 500;\n    const r = 3.5;\n    let counts = {\"山鸢尾\": 0, \"杂色鸢尾\": 0, \"维吉尼亚鸢尾\": 0};\n    let testlabel = \"\";\n    let k = 15;\n    let svg;\n    let gtext, plusText;\n    let xAxis;\n    let yAxis;\n    let y, ry;\n    let x, rx;\n    let point = {};\n    let svglink;\n    let strlegend;\n\n    \n    onMount(async () => {\n        // window.location.hash = \"#article\";\n        window.scrollTo(0,0);\n        strlegend = swatches({\n            color: d3.scaleOrdinal(labels, arrcolor)\n        })\n        const data = await d3.csv(\"PUBLIC_URL/assets/data/Iris.csv\");\n        // const data = d3.csvParse(await FileAttachment(\"PUBLIC_URL/assets/data/us-population-state-age.csv\").text(), d3.autoType);\n        // const ages = data.columns.slice(1);\n        // for (const d of data) d.total = d3.sum(ages, age => d[age]);\n        // outdata = ages.flatMap(age => data.map(d => ({name: d.name, age, value: d[age] / d.total})));\n\n        const newlabels = data.columns.slice(1);\n        outdata = data.map(d => ({x: d.SepalLengthCm * 10, y: d.PetalLengthCm * 10, label: en2ch[d.Species]}));\n\n        y = d3.scaleLinear()\n            .domain(d3.extent(outdata, d => d.y))\n            .range([margin.top, height - margin.bottom]);\n\n        ry = d3.scaleLinear()\n            .domain([margin.top, height - margin.bottom])\n            .range(d3.extent(outdata, d => d.y));\n\n        x = d3.scaleLinear()\n            .domain(d3.extent(outdata, d => d.x))\n            .range([margin.left + 10, width - margin.right]);  \n \n        rx = d3.scaleLinear()\n            .domain([margin.left + 10, width - margin.right])\n            .range(d3.extent(outdata, d => d.x));    \n\n        yAxis = g => g.attr(\"transform\", `translate(${margin.left},0)`)\n            .call(d3.axisLeft(y).ticks(10))\n            .call(g => g.selectAll(\".tick line\").clone().attr(\"stroke-opacity\", 0.1).attr(\"x2\", width - margin.right - margin.left))\n            .call(g => g.selectAll(\".domain\").remove());\n\n        xAxis = g => g.attr(\"transform\", `translate(0,${margin.top})`)\n            .call(d3.axisTop(x).ticks(20))\n            .call(g => g.selectAll(\".tick line\").clone().attr(\"stroke-opacity\", 0.1).attr(\"y2\", height - margin.bottom - margin.top))\n            .call(g => g.selectAll(\".domain\").remove())\n\n        svg = d3.select('#knn-svg')\n        .attr(\"viewBox\", [0, 0, width, height]);\n\n        svg.append(\"g\")\n            .style(\"pointer-events\", \"none\")\n            .call(xAxis);\n\n        svg.append(\"text\")\n            .attr(\"transform\", `translate(${5},${height - 10})`)\n            .style(\"font-size\", \"10px\")\n            .attr('class', 'annotation-text')\n            .text(\"花瓣长度（mm)\");   \n        \n        svg.append(\"g\")\n            .style(\"pointer-events\", \"none\")\n            .call(yAxis);\n\n        svg.append(\"text\")\n            .attr(\"transform\", `translate(${width - 80},${margin.top + 10})`)\n            .attr('class', 'annotation-text')\n            .style(\"font-size\", \"10px\")\n            .text(\"花萼长度（mm)\");   \n\n        svg.append(\"g\")\n            .attr(\"class\", \"tcircles\")\n            .attr(\"fill\", \"none\")\n            .attr(\"pointer-events\", \"all\")\n            .selectAll(\"circle\")\n            .data(outdata)   \n            .join(\"circle\")\n            .attr(\"stroke\", d => color[d.label])\n            .attr(\"r\", r)\n            .attr(\"cx\", d => x(d.x))\n            .attr(\"cy\", d => y(d.y))\n            .append(\"title\")\n            .text(d => `品种: ${d.label}  位置:(${(d.x)},  ${d.y})`);\n\n        const circles = d3.range(1).map(i => ({\n            x: 56,\n            y: 25,\n        }));\n        point.x = 56;\n        point.y = 25;\n        svg.append('g')\n            .selectAll(\"circle\")\n            .data(circles)\n            .join(\"circle\")\n            .attr(\"fill\", \"yellow\")\n            .attr(\"stroke\", \"#C4C400\")\n            .attr(\"r\", r)\n            .attr(\"cx\", d => x(d.x))\n            .attr(\"cy\", d => y(d.y))\n            .style(\"cursor\", \"move\")\n            .call(d3.drag()\n                    .on(\"start\", dragstarted)\n                    .on(\"drag\", dragged)\n                    .on(\"end\", dragended));\n        sortdata = outdata;\n        sortdata.sort((a, b) =>{\n            let distance1 = (a.x - point.x)**2 + (a.y - point.y)**2;\n            let distance2 = (b.x - point.x)**2 + (b.y - point.y)**2;\n            return distance1 - distance2;\n        })\n        kdata = sortdata.slice(0, k);\n        svglink = svg.insert(\"g\", \".tcircles\")\n            .attr(\"id\", \"lines\")\n            .selectAll(\"line\")\n            .data(kdata)\n            .join(\"line\")\n            .attr(\"stroke\", d => color[d.label])\n            .style('opacity', 0.5)\n            .attr(\"x1\", x(point.x))\n            .attr(\"y1\", y(point.y))\n            .attr(\"x2\", d => x(d.x))\n            .attr(\"y2\", d => y(d.y))\n        \n        d3.select('#num-k').text(\"k = \" + k);\n        d3.select(\"#add-layers\").on(\"click\", () => {\n            k++;\n            let diff = 1;\n            if (k > 30) {\n                k = 30;\n                diff = 0;\n            }\n            d3.select(\"#num-k\").text(\"k = \" + k);\n            drawklines(diff);\n        });\n\n        d3.select(\"#remove-layers\").on(\"click\", () => {\n            k--;\n            let diff = -1;\n            if (k <= 0) {\n                k = 1;\n                diff = 0;\n            }\n            d3.select(\"#num-k\").text(\"k = \" + k);\n            drawklines(diff);\n        });\n        countlabelnums();\n    })\n\n    function drawklines(diff){\n        sortdata.sort((a, b) =>{\n            let distance1 = (a.x - point.x)**2 + (a.y - point.y)**2;\n            let distance2 = (b.x - point.x)**2 + (b.y - point.y)**2;\n            return distance1 - distance2;\n        });\n        kdata = sortdata.slice(0, k);\n        if(diff > 0){\n            svglink = d3.select(\"#lines\").selectAll(\"line\");\n            svglink.data(kdata)\n            .enter()\n            .append('line')\n            .transition()\n            .duration(1000)\n            .attr(\"stroke\", d => color[d.label]) \n            .style('opacity', 0.5)\n            .attr(\"x1\", x(point.x))\n            .attr(\"y1\", y(point.y))\n            .attr(\"x2\", d => x(d.x))\n            .attr(\"y2\", d => y(d.y));\n\n        }else if(diff < 0){\n            svglink = d3.select(\"#lines\").selectAll(\"line\");\n            svglink.data(kdata)\n            .exit()\n            .transition()\n            .duration(100)\n            .remove()\n            .attr(\"stroke\", d => color[d.label])\n            .style('opacity', 0.5)\n            .attr(\"x1\", x(point.x))\n            .attr(\"y1\", y(point.y))\n            .attr(\"x2\", d => x(d.x))\n            .attr(\"y2\", d => y(d.y));\n\n        }else{\n            svglink.data(kdata)\n            .transition()\n            .duration(1000)\n            .attr(\"x1\", x(point.x))\n            .attr(\"y1\", y(point.y))\n            .attr(\"x2\", d => x(d.x))\n            .attr(\"y2\", d => y(d.y))\n            .attr(\"stroke\", d => color[d.label]) \n            .style('opacity', 0.5);\n        }\n    }\n\n    function dragstarted(d){\n        svglink = d3.select(\"#lines\").selectAll(\"line\");\n        d3.select(this).attr(\"stroke\", \"black\");\n    }\n\n    function dragged(d){\n        d3.select(this).raise().attr(\"cx\", d.x = d3.event.x).attr(\"cy\", d.y = d3.event.y);\n        point.x = rx(d3.event.x)\n        point.y = ry(d3.event.y)\n        svglink.data(kdata)\n            .attr(\"x1\", x(point.x))\n            .attr(\"y1\", y(point.y))\n            .attr(\"x2\", d => x(d.x))\n            .attr(\"y2\", d => y(d.y))\n    }\n    function dragended(d){\n        d3.select(this).attr(\"stroke\", \"#C4C400\");\n        if(d3.event.x > width - margin.right || d3.event.x < margin.left + 10){\n            d3.select(this).attr(\"cx\", d.x = x(50));\n            point.x = 50;\n        }else if(d3.event.y > height - margin.bottom || d3.event.y < margin.top){\n            d3.select(this).attr(\"cy\", d.y = y(50));\n            point.y = 50;\n        }else{\n            point.x = rx(d3.event.x)\n            point.y = ry(d3.event.y) \n        }\n        drawklines(0);\n        countlabelnums();\n    }\n\n    function countlabelnums(){\n        counts = {\"山鸢尾\": 0, \"杂色鸢尾\": 0, \"维吉尼亚鸢尾\": 0};\n        for(let i=0; i<k; ++i){\n            counts[kdata[i].label] += 1;\n        }\n        let max_num = 0;\n        let keys = Object.keys(counts);\n        for(let i=0; i<keys.length; ++i){\n            if(counts[keys[i]] > max_num){\n                max_num = counts[keys[i]];\n                testlabel = keys[i];\n            }\n        }\n    }\n\n    function swatches({\n        color,\n        format = x => x,\n        swatchSize = 20,\n        swatchWidth = swatchSize,\n        swatchHeight = swatchSize,\n        marginLeft = 0\n    }) {\n        const id = 'color-legend2';\n    \n        return `<div style=\"display: flex; align-items: center; min-height: 33px; margin-left: ${+marginLeft}px; font: 12px sans-serif; float: right\">\n        <style>\n\n        .${id} {\n        pointer-events: none;\n        display: inline-flex;\n        align-items: flex-end;\n        margin-right: 2em;\n        font-style: italic;\n        fill: gray;\n        }\n\n        .${id}::before {\n        content: \"\";\n        width: ${+swatchWidth}px;\n        height: ${+swatchHeight}px;\n        margin-right: 0.5em;\n        margin-top: 10px;\n        background: var(--color);\n        }\n\n        </style>\n        <div>${color.domain().map(\n            value => `<span class=\"${id}\" style=\"--color: ${color(value)}\">${value}</span>`).join(\"\")}</div>`;\n    }\n</script>\n\n<style>\n    #knnarticle{\n        margin-top:60px;\n        margin-bottom: 60px;\n        margin-left: auto;\n        margin-right: auto;\n        max-width: 78ch;\n    }\n    #knn{\n        position:relative;\n        width: 100%;\n        height: 680px;\n        margin-bottom: 10px;\n        font-family: \"Helvetica\", \"Arial\", sans-serif;\n        background-color: #f7f7f7;\n    }\n    #foot{\n        margin-left: auto;\n        margin-right: auto;\n        max-width: 78ch;\n        position:relative;\n        border-top: solid 1px #eee;\n        padding: 20px 20px;\n    }\n    #foot .lasttext{\n        font-style: italic;\n        font-size: 20px;\n        color: rgb(226, 195, 90);\n    }\n\n\t.box {\n        pointer-events: none;\n\t\twidth: 150px;\n\t\tborder: 1px solid #aaa;\n\t\tborder-radius: 2px;\n\t\tbox-shadow: 2px 2px 8px rgba(0,0,0,0.1);\n\t\tpadding: 1em;\n\t\tmargin: 0 0 0.5em 0;\n        position:absolute;\n        left: 1235px;\n        top:-568px;\n        border-radius: 5px;\n\t}\n    .box1 {\n        position:relative;\n        left:20%;\n        top:30px;\n\t\twidth: 880px;\n\t\tborder: 1px solid #aaa;\n\t\tborder-radius: 2px;\n\t\tbox-shadow: 2px 2px 8px rgba(0,0,0,0.1);\n\t\tpadding: 1em;\n\t\tmargin: 0 0 0.5em 0;\n        border-radius: 5px;\n        background: white;\n\t}\n    .clearfix{\n        position:relative;\n        left:20%;\n        top:30px;\n        width: 880px;\n\t\tborder: 1px solid #aaa;\n\t\tborder-radius: 2px;\n\t\tbox-shadow: 2px 2px 8px rgba(0,0,0,0.1);\n\t\tpadding: 1em;\n\t\tmargin: 0 0 0.5em 0;\n        border-radius: 5px;\n        background: white;\n    }\n    .clearfix:after {\n        content: '.';\n        display: block;\n        height: 0;\n        clear: both;\n        visibility: hidden;\n    }\n    #num-k{\n        font-style: italic;\n        fill: gray;\n        pointer-events: none;\n    }\n    .return {\n        position: absolute;\n        right: -300px;\n        top: 80%;\n        font-size: 20px;\n        font-style: italic;\n        color: steelblue;\n    }\n    .title{\n        font-style: italic;\n        color: steelblue;\n    }\n    .l--body h2{\n        padding-top: 20px;\n    }\n    .l--body p{\n        font-size: 18px;\n    }\n    #explain{\n        position: relative;\n        left: 74%;\n        top: -554px;\n    }\n    #explain p{\n        max-width: 20ch;\n        pointer-events: none;\n        font-size: 10px;\n        font-style: italic;\n        fill: gray;\n    }\n</style>\n\n<article id=\"knnarticle\">\n    <div id=\"One\"><h1>Section: KNN</h1></div>\n    <div>\n        <h5>\n            你将之前测量的花瓣的长度x1，花萼的长度x2，在坐标轴上画出了他们的分布（x1,\n\t\t\tx2）。你发现了从这个二维的坐标平面上似乎比之前的用“树”的结构来表示判断条件更为直观。\n\t\t\t那在这个坐标平面上要如何对鸢尾花进行分类预测呢？  \n        </h5>\n    </div>\n    <div class=\"l--body\">\n      <h2 class=\"title\">什么是KNN?</h2>\n      <p>KNN 为K最近邻算法（K-Nearest Neighbor）的英文简称, 它的算法思想简单来说就是如果一个样本在特征空间中的K个最相似（即特征空间中最邻近）的样本中的大多数属于某一个类别，则该样本也属于这个类别。在这里我们用欧式距离定义特征之间的相似度，距离越近，两个样本的相似度越高。</p>\n    </div>\n\n    <div class=\"l--body\">\n      <h2 class=\"title\">KNN算法的可视化</h2>\n      <p>将鸢尾花数据根据花萼长度及花瓣长度绘制在坐标轴中，其中每一点都代表一个已知的样本，且图像中两点之间的距离便代表了它们之间的相似度。</p>\n      <p>当有一个未知品种的鸢尾花时，根据它的两个特征将之绘制在图中，便可以找到它的K个最近邻。</p>\n    </div>\n\n    <div class=\"l--body\">\n      <h2 class=\"title\">尝试一下</h2>\n      <p>小明根据要求绘制好了可视化图像，并将未知品种的鸢尾花以黄点标注在了图中。</p>\n      <p>拖动黄点试试吧，右上角会显示此时样本的预测类别，以及距离最近的K个样本的种类数目。</p>\n    </div>\n</article>\n\n\n<div id=\"knn\">\n    <div id=\"top-legends\" class=\"clearfix\">\n        <div style=\"float: left; margin-right: 5px;\">\n            <div class=\"ui-numHiddenLayers\" style=\"float: left; margin-right: 15px;\">\n                <button id=\"add-layers\" class=\"mdl-button mdl-js-button mdl-button--fab mdl-button--mini-fab\">\n                    <i class=\"material-icons\">add</i>\n                </button>\n                <button id=\"remove-layers\" class=\"mdl-button mdl-js-button mdl-button--fab mdl-button--mini-fab\">\n                    <i class=\"material-icons\">remove</i>\n                </button>\n            </div>\n            <span id=\"num-k\" style=\"float: left; margin-right: 5px; font-size: 25px\"></span>\n        </div>\n\n        {@html strlegend}\n    </div>\n    <div id=\"knn-graph\">\n        <div class=\"box1\"> \n            <svg id=\"knn-svg\"></svg>\n        </div>\n        <div class=\"box\" style=\"position: relative;\">\n            <slot>\n                <p style=\"font-size: 25px; font-style: italic; color: steelblue;\">{testlabel} </p>\n                {#each labels as label, i}\n                    <p style=\"font-style: italic;fill: gray;\">{label} : {counts[label]}</p>\n                {/each}\n            </slot>\n        </div>\n    </div>\n    <div id=\"explain\">\n        <p>黄点为未知的鸢尾花样本它的预测类别以及它邻近样本的类别会在上方显示</p>\n        <p>接着再拖动它试试吧 !</p>\n    </div>\n</div>\n\n<footer id=\"foot\">\n    <div class=\"l--body\">\n      <h3 class='title'>扩展与补充</h3>\n      <p>待补充</p>\n    </div>\n    <div class=\"lasttext\">\n      <p>待补充</p>\n    </div>\n    <a href=\"/\" use:link rel=\"prefetch\">\n        <div class=\"return\">返回</div>\n    </a>\n</footer>\n",
    "<script type=\"text/javascript\">\n    import { onMount } from 'svelte';\n    import { link } from \"svelte-spa-router\";\n    var m = [20, 120, 20, 120],\n        w = 1500 ,\n        h = 500 ,\n        i = 0,\n        rect_width = 100,\n        rect_height = 20,\n        max_link_width = 20,\n        min_link_width = 1.5,\n        char_to_pxl = 8,\n        root;\n\n    const irislabel = [\"花萼长度\", \"花萼宽度\", \"花瓣长度\", \"花瓣宽度\"];\n    const iristype = [\"山鸢尾\", \"杂色鸢尾\", \"维吉尼亚鸢尾\"];\n    var tree;\n    var diagonal;\n    var vis;\n    var gLink;\n    var gNode;\n    var gtext, plusText;\n    var link_stoke_scale;\n    var color_map;\n    var stroke_callback = \"#ccc\";\n\n    onMount(async () =>{\n\n        window.scrollTo(0,0);\n\n        const jdata =await d3.json(\"PUBLIC_URL/assets/data/iris.json\");\n\n\n        tree = d3.tree()\n            .size([1000, 1500]);\n\n        diagonal = d3.linkHorizontal()\n            .x(d => d.x)\n            .y(d => d.y);\n\n        vis = d3.select(\"#tree-svg\")\n                .attr(\"viewBox\", [-200, -20, w , h]);\n\n        gLink = vis.append(\"g\")\n                .attr(\"fill\", \"none\")\n                .attr(\"stroke\", \"#555\")\n                .attr(\"stroke-opacity\", 0.4);\n\n        gNode = vis.append(\"g\")\n                .attr(\"pointer-events\", \"all\");\n\n        gtext = vis.append(\"g\")\n                    .attr('class', 'root-text');\n        plusText = gtext.append('text')\n            .attr('x', 350)\n            .attr('y', 0)\n            .attr('class', 'annotation-text')\n            .style('dominant-baseline', 'hanging')\n            .style('text-anchor', 'middle');\n        plusText.append('tspan')\n            .style('dominant-baseline', 'hanging')\n            .text('点击结点展开');\n        plusText.append('tspan')\n            .attr('x', 350)\n            .attr('dy', '1.5em')\n            .style('dominant-baseline', 'hanging')\n            .text('决策树');\n        plusText.append('tspan')\n            .attr('x', 350)\n            .attr('dy', '1.5em')\n            .style('dominant-baseline', 'hanging')\n            .text('当满足结点条件时');\n        plusText.append('tspan')\n            .attr('x', 350)\n            .attr('dy', '1.5em')\n            .style('dominant-baseline', 'hanging')\n            .text('决策前往');\n        plusText.append('tspan')\n            .attr('fill', 'green')\n            .style('dominant-baseline', 'hanging')\n            .text('左分支');\n        drawArrow({\n            group: gtext,\n            sx: 380,\n            sy: 15,\n            tx: 440,\n            ty: 0,\n            dr: 50,\n            hFlip: 0,\n        });\n\n    \n        color_map = d3.scaleOrdinal(d3.schemeCategory10);\n\n        load_dataset(jdata);\n    })\n\n\n\n    function load_dataset(json) {\n        root = d3.hierarchy(json);\n        root.x0 = 500;\n        root.y0 = 1000;\n\n        var n_samples = json.samples;\n        var n_labels = json.value.length;\n\n        if (n_labels >= 2) {\n            stroke_callback = mix_colors;\n        } else if (n_labels === 1) {\n            stroke_callback = mean_interpolation(root);\n        }\n\n        link_stoke_scale = d3.scaleLinear()\n                                    .domain([0, n_samples])\n                                    .rangeRound([min_link_width, max_link_width]);\n\n        root.descendants().forEach((d, i) => {\n            d.id = i;\n            d._children = d.children;\n            d.children = null;\n            if (d.data.type === \"leaf\") d.children = null;\n        });\n\n        update(root);\n    }\n\n    function update(source) {\n        var duration = d3.event && d3.event.altKey ? 5000 : 500;\n        const nodes = root.descendants().reverse();\n        const links = root.links();\n\n        // d3计算树的结构\n        tree(root);\n\n\n        // 设置固定深度\n        let ntop = root;\n        let nbottom = root;\n        nodes.forEach(function(d) { \n            d.y = d.depth * 180;\n            if(d.y < ntop.y) ntop = d;\n            if(d.y > nbottom.y) nbottom = d;   \n        });\n\n        const transition = vis.transition()\n            .duration(duration)\n            .attr(\"viewBox\", [-200, -20, w , Math.max(300, nbottom.y - ntop.y + 100)])\n            .tween(\"resize\", window.ResizeObserver ? null : () => () => vis.dispatch(\"toggle\"));\n\n        const node = gNode.selectAll(\"g\")\n                        .data(nodes, d => d.id)\n\n        const nodeEnter = node.enter().append(\"g\")\n            .attr(\"class\", \"node\")\n            .attr(\"transform\", d => `translate(${source.y0},${source.x0})`)\n            .attr(\"fill-opacity\", 0)\n            .attr(\"stroke-opacity\", 0)\n            .on(\"click\", d => {\n                d.children = d.children ? null : d._children;\n                update(d);\n                d3.select('.root-text')\n                .transition()\n                .duration(200)\n                .attr(\"transform\", d => `translate(-150, 0)`)\n            });\n                \n\n        nodeEnter.append(\"rect\")\n            .attr(\"class\", d => {return d.data.type === \"split\" ? \"cursor\" : \"no\"})\n            .attr(\"x\", function(d) {\n                var label = node_label(d);\n                var text_len = label.length * char_to_pxl;\n                var width = d3.max([rect_width, text_len])\n                return -width / 2;\n            })\n            .attr(\"rx\", function(d) { return d.data.type === \"split\" ? 2 : 0;})\n            .attr(\"ry\", function(d) { return d.data.type === \"split\" ? 2 : 0;})\n            .style(\"stroke\", function(d) { return d.data.type === \"split\" ? \"steelblue\" : \"olivedrab\";})\n            .style(\"fill\", function(d) { return d._children ? \"#f7f7f8\" : \"#fff\"; });\n\n        nodeEnter.append(\"text\")\n            .attr(\"class\", d => { return d._children ? 'cursor': 'no'})\n            .attr(\"dy\", \"14px\") \n            .attr(\"font-size\", \"12px\")\n            .attr(\"text-anchor\", \"middle\")\n            .append('tspan')\n            .style('fill', d => { return d._children ? 'red': 'steelblue'})\n            .text(node_label);\n\n        // 更新结点位置\n\n        const nodeUpdate = node.merge(nodeEnter).transition()\n            .duration(duration)\n            .attr(\"transform\", d => `translate(${d.x},${d.y - 5})`)\n            .attr(\"fill-opacity\", 1)\n            .attr(\"stroke-opacity\", 1);\n\n\n        nodeUpdate.selectAll(\"rect\")\n            .attr(\"width\", rect_width)\n            .attr(\"height\", rect_height)\n            .attr(\"fill\", function(d) { return d._children ? \"#fff\" : \"#fff\"; })\n            .style(\"stroke-width\", \"1.5px\");\n        \n        d3.selectAll(\".cursor\")\n            .style(\"cursor\", \"pointer\");\n\n        nodeUpdate.select(\"text\")\n            .style(\"fill-opacity\", 1);\n\n        const nodeExit = node.exit().transition().remove()\n            .attr(\"transform\", d => `translate(${source.x},${source.y})`)\n            .attr(\"fill-opacity\", 0)\n            .attr(\"stroke-opacity\", 0);\n\n        // 更新连线\n        let link = gLink.selectAll(\"path\")\n            .data(links, d => d.target.id);\n\n\n        const linkEnter = link.enter().append(\"path\")\n            .attr(\"class\", \"link\")\n            .attr(\"d\", d => {\n            const o = {x: source.x0, y: source.y0};\n            return diagonal({source: o, target: o});\n            });\n\n\n        link.merge(linkEnter).transition()\n            .attr(\"d\", diagonal)          \n            .style(\"stroke\", stroke_callback)\n            .style(\"stroke-width\", \"5\");\n\n        \n        link.exit().transition()\n            .attr(\"d\", d => {\n            const o = {x: source.x, y: source.y};\n            return diagonal({source: o, target: o});\n            }).remove();\n\n\n        nodes.forEach(function(d) {\n            d.x0 = d.x;\n            d.y0 = d.y;\n        });\n    }\n\n    // 结点标签\n    function node_label(d) {\n        d = d.data;\n        if (d.type === \"leaf\") {\n            // 叶子\n            var formatter = d3.format(\".2f\");\n            var vals = [];\n            d.value.forEach(function(v) {\n                vals.push(v);\n            });\n            var maxvalue = Math.max(...vals);\n            var index = vals.indexOf(maxvalue);\n            return iristype[vals.indexOf(Math.max(...vals))];\n        } else {\n            // 非叶结点\n            var label = d.label;\n            label = label.replace(\"X[0]\", irislabel[0]);\n            label = label.replace(\"X[1]\", irislabel[1]);\n            label = label.replace(\"X[2]\", irislabel[2]);\n            label = label.replace(\"X[3]\", irislabel[3]);\n            return label;\n        }\n    }\n\n    function mix_colors(d) {\n        var value = d.target.data.value;\n        var sum = d3.sum(value);\n        var col = d3.rgb(0, 0, 0);\n        value.forEach(function(val, i) {\n            var label_color = d3.rgb(color_map(i));\n            var mix_coef = val / sum;\n            col.r += mix_coef * label_color.r;\n            col.g += mix_coef * label_color.g;\n            col.b += mix_coef * label_color.b;\n        });\n        return col;\n    }\n\n\n    /**\n     设置线段颜色.\n     */\n    function mean_interpolation(root) {\n\n        var max = 1e-9,\n            min = 1e9;\n\n        function recurse(node) {\n            if (node.value[0] > max) {\n            max = node.value[0];\n            }\n\n            if (node.value[0] < min) {\n            min = node.value[0];\n            }\n\n            if (node.children) {\n            node.children.forEach(recurse);\n            }\n        }\n        recurse(root);\n\n        var scale = d3.scale.linear().domain([min, max])\n                                    .range([\"#2166AC\",\"#B2182B\"]);\n\n        function interpolator(d) {\n            return scale(d.target.data.value[0]);\n        }\n\n        return interpolator;\n    }\n\n    const drawArrow = (arg) => {\n        let group = arg.group,\n            sx = arg.sx,\n            sy = arg.sy,\n            tx = arg.tx,\n            ty = arg.ty,\n            dr = arg.dr,\n            hFlip = arg.hFlip,\n            marker = arg.marker === undefined ? 'marker' : arg.marker;\n        \n        let arrow = group.append('g')\n            .attr('class', 'arrow-group');\n\n        arrow.append('path')\n            .attr(\"d\", `M${sx},${sy}A${dr},${dr} 0 0,${hFlip ? 0 : 1} ${tx},${ty}`)\n            .attr('marker-end', 'url(#markerArrow)')\n            .style('stroke', 'gray')\n            .style('fill', 'none');\n    }\n\n</script>\n\n\n<style type=\"text/css\">\n\n    #article{\n        margin-top:60px;\n        margin-bottom: 60px;\n        margin-left: auto;\n        margin-right: auto;\n        max-width: 78ch;\n    }\n    #treebody{\n        position:relative;\n        width: 100%;\n        /* height: 680px; */\n        margin-bottom: 10px;\n        font-family: \"Helvetica\", \"Arial\", sans-serif;\n        background-color: #f7f7f7;\n    }\n    #foot{\n        margin-left: auto;\n        margin-right: auto;\n        max-width: 78ch;\n        position:relative;\n        border-top: solid 1px #eee;\n        padding: 20px 20px;\n    }\n    #foot p{\n        padding-top: 20px;\n    }\n    #foot .lasttext{\n        font-style: italic;\n        font-size: 20px;\n        color: rgb(226, 195, 90);\n    }\n    #treebody {\n        width: 100%;\n        margin: auto;\n        font-family: \"Helvetica Neue\", Helvetica;\n    }\n\n    .return {\n        position: absolute;\n        right: -300px;\n        top: 80%;\n        font-size: 20px;\n        font-style: italic;\n        color: steelblue;\n    }\n    .title{\n        font-style: italic;\n        color: steelblue;\n    }\n    .l--body h2{\n        padding-top: 20px;\n    }\n    .l--body p{\n        font-size: 18px;\n    }\n</style>\n\n<div id=\"article\">\n    <div id=\"One\"><h1>Section: 决策树</h1></div>\n    <div>\n        <h5>\n            你想起之前有一个学园艺的哥哥，你问他：“这是哪一类的鸢尾花？”他向你询问更多的细节：你先看“它的花萼长吗？”，如果是“长花萼”，我们再看“它的花瓣是怎样的形态？”，是“窄花瓣”，那我们得到最终决策：这是山鸢尾花。 \n        </h5>\n    </div>\n    <div class=\"l--body\">\n      <h2 class='title'>决策树模型</h2>\n        <ul> \n            <li>每个“非叶结点”对应于某属性上的一次决策</li> \n            <li>每个结点之后分支对应于该决策的一种可能结果</li>\n            <li>每个“叶结点”对应于一个预测结果</li> \n        </ul>\n      <p>决策树的学习过程即通过对训练样本的分析来确定“划分属性”（即内部结点所对应的属性），而预测过程就是将测试示例从根结点开始，沿着划分属性所构成的“判定测试序列”下行，直到叶结点</p>\n    </div>\n\n    <div class=\"l--body\">\n      <h2 class='title'>再来看看这棵树</h2>\n        <p>当你在选取判断的时候，你可能像之前那样判断鸢尾花花瓣的长宽。花瓣的长度和宽度是两个不同的“特征”。</p>\n        <p>这个特征能否很好的区分鸢尾花的类型呢？你要如何衡量这个判断指标呢？</p>\n        <p>统计学里有几种算法可以帮助我们寻找好的切分点，通过划分算法来找到当前最佳的结点划分方式。简单来讲，每一个特征针对训练数据集的前后信息变化的影响是不一样的，当这些衡量参数在划分前后变化越大，即代表这种影响越大。而影响越大，就表明该特征更加重要。</p>\n    </div>\n\n    <div class=\"l--body\">\n      <h2 class='title'>决策树生长</h2>\n      <p>当你点开各个分节点，更多的分支会给决策树增加新的信息，从而增强决策树的预测准确性。加多一层，决策树的准确性增加到84%。再加几层，准确性增加到96%。我们甚至可以继续加分支直到决策树的分类正确率达到100%，这所有决策树末梢的分类结果会是纯粹山鸢尾花或者变色鸢尾，即将两类鸢尾花完全分开。</p>\n      <p>决策树的末节通常又叫做叶节点(leaf nodes)。决策树的预测取决于叶节点内哪一类的样本相对较多。</p>\n    </div>\n    <div class=\"l--body\">\n      <h2 class='title'>尝试一下</h2>\n      <p>小明现在已经训练好了一个决策树的分类模型了，你要如何帮助他来使用这个模型呢？如果你再测量一朵鸢尾花的值，决策树是怎样做出预测的呢？这一朵新的鸢尾花，从根节点开始，跟着决策树分支的分叉顺序走到叶节点。叶节点是那一类，就预测那一类。每条路径构成了做出预测的规则。这样走到最后便能对这朵鸢尾花的类别做出预测。</p>\n    </div>\n</div>\n<div id=\"treebody\">\n    <svg id=\"tree-svg\"></svg>\n</div>\n\n<footer id=\"foot\">\n    <div class=\"l--body\">\n      <h3 class='title'>扩展与补充</h3>\n      <p>决策树算法广泛应用于：语音识别、医疗诊断、客户关系管理、模式识别、专家系统等，在实际工作中，必须根据数据类型的特点及数据集的大小，选择合适的算法。想了解更多的相关知识，可以在机器学习相关的书籍中更详细的决策树原理。</p>\n    </div>\n    <div class=\"lasttext\">\n      <p>小明是一个想法很多的同学，他觉得决策树的分类结果并不能够让他十分满意，让我们看看他又尝试了那些方法吧！</p>\n    </div>\n    <a href=\"/\" use:link rel=\"prefetch\">\n        <div class=\"return\">返回</div>\n    </a>\n</footer>",
    "<script>\n  import Knn from './Knn.svelte'\n  import NN1 from './Graph1_view.svelte'\n</script>\n<style>\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6 {\n    font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto,\n      Oxygen-Sans, Ubuntu, Cantarell, Helvetica Neue, sans-serif;\n  }\n  .Content-module--content__title--2nRHa {\n    font-size: 2.5rem;\n    line-height: 3.25rem;\n    margin-top: 2.4375rem;\n    font-weight: 500;\n  }\n  .Content-module--content__subtitle--34jJU {\n    font-size: 1.875rem;\n    line-height: 2.4375rem;\n  }\n  .Content-module--content__spacer--2kN9Y {\n    margin-bottom: 1.625rem;\n  }\n  .katex-display {\n    margin: 1em auto;\n    margin-top: 1em;\n    margin-right: auto;\n    margin-bottom: 1em;\n    margin-left: auto;\n    display: block;\n    text-align: center;\n  }\n  .katex {\n    font: normal 1.21em KaTeX_Main, Times New Roman, serif;\n    line-height: 1.2;\n    text-indent: 0;\n    text-rendering: auto;\n  }\n  .katex .katex-mathml {\n    position: absolute;\n    clip: rect(1px, 1px, 1px, 1px);\n    padding: 0;\n    border: 0;\n    height: 1px;\n    width: 1px;\n    overflow: hidden;\n  }\n  .katex-display > .katex > .katex-html {\n    display: block;\n    position: relative;\n  }\n  .katex .base {\n    position: relative;\n    white-space: nowrap;\n    width: min-content;\n  }\n  .katex .base,\n  .katex .strut,\n  .katex .mspace {\n    display: inline-block;\n  }\n  .inline-square {\n    margin-left: 5px;\n    width: 12px;\n    height: 12px;\n    display: inline-block;\n  }\n  .left_tree {\n    position: fixed;\n    top: 90px;\n    width: 16vw;\n    height: 100%;\n    background: rgba(103, 103, 120, 1);\n  }\n  .left_tree ul {\n    list-style: none;\n  }\n  .left_tree li a {\n    color: white;\n  }\n  .right_content {\n    margin-left: auto;\n    margin-right: auto;\n    max-width: 100ch;\n    height: calc(100% - 90px);\n  }\n  .name_md {\n    font-size: 20px;\n    font-weight: 600;\n  }\n  /* 这是用来固定锚点位置的 具体样式在.name_md里写 */\n  .extra {\n    border-top: solid 200px #fff;\n    margin-top: -200px;\n  }\n  .picture1 {\n    width: 200px;\n    height: 200px;\n    background-image: url(\"tmp/Picture1.png\");\n    background-size: 100% auto;\n    color: transparent !important;\n  }\n</style>\n\n<div class=\"right_content\">\n  <div class=\"name_md extra\" id=\"Zero\"></div>\n  <div>\n    <h2 class=\"Content-module--content__title--2nRHa \">\n      1.决策树——“分而治之”\n    </h2>\n    <br/>\n    <div class=\"Content-module--content__spacer--2kN9Y\" />\n    <h5>\n      你想起之前有一个学园艺的哥哥，你问他：“这是哪一类的鸢尾花？”他向你询问更多的细节：你先看“它的花萼长吗？”，如果是“长花萼”，我们再看“它的花瓣是怎样的形态？”，是“窄花瓣”，那我们得到最终决策：这是山鸢尾花。\n    </h5>\n  </div>\n\n  <!-- More -->\n  <div class=\"more\">\n    <!-- <button class=\"mdl-button mdl-js-button mdl-button--icon\"><i class=\"material-icons\">keyboard_arrow_down</i></button> -->\n    <button class=\"mdl-button mdl-js-button mdl-button--fab\">\n      <i class=\"material-icons\">keyboard_arrow_down</i>\n    </button>\n  </div>\n  <div class=\"name_md extra\" id=\"One\"><h2>1. 遇到分类问题</h2></div>\n  <div>\n    <h5>\n      你观察到有一块集中的部分的鸢尾有较大的花瓣，而它旁边的一块的花瓣却很小。你想搞清楚他们究竟属于哪一类鸢尾花，于是你上网搜索，发现网上说可以根据一些特征值来刻画事物的某些方面的特点，比如通过花萼的长、花萼的宽、花瓣的长和花瓣的宽来辨别他们。于是你测量了一些花的长和宽。\n    </h5>\n   \n    <h5>***********************一些鸢尾花图片***********************</h5>\n  </div>\n\n    <!-- More -->\n  <div class=\"more\">\n    <!-- <button class=\"mdl-button mdl-js-button mdl-button--icon\"><i class=\"material-icons\">keyboard_arrow_down</i></button> -->\n    <button class=\"mdl-button mdl-js-button mdl-button--fab\">\n      <i class=\"material-icons\">keyboard_arrow_down</i>\n    </button>\n  </div>\n\n  <div class=\"name_md extra\" id=\"One\"><h2>2.决策树-简单分析</h2></div>\n  <h5>\n    网上说宽大于2cm，长大于5cm的可能是山鸢尾。而小于的可能是变色鸢尾，你发现了很多这样的判断，\n    你想把他们整理一下，于是你借鉴树的结构将他们分成了这种判断：\n  </h5>\n  <div>\n    <a target=\"_blank\" href=\"/dt/index.html\">尝试下决策树吧</a>\n  </div>\n\n  <!-- More -->\n  <div class=\"more\">\n    <!-- <button class=\"mdl-button mdl-js-button mdl-button--icon\"><i class=\"material-icons\">keyboard_arrow_down</i></button> -->\n    <button class=\"mdl-button mdl-js-button mdl-button--fab\">\n      <i class=\"material-icons\">keyboard_arrow_down</i>\n    </button>\n  </div>\n\n  <div class=\"name_md extra\" id=\"One\"><h2>3.初步构造分类器</h2></div>\n  <div>\n  <h5>\n      然后你又换了一种思路\n      你将花瓣的长作为x轴，花瓣的宽作为y轴，在坐标轴上画出了他们的分布。\n\n    </h5>\n    <h5>***************一些样简单交互*********************</h5>\n    <NN1 />\n    <h5>\n      这就是人工智能中的分类问题。\n那么我们要怎么分开他们呢 你想到了用一条直线来分开他们。在直线上方的属于山鸢尾，在直线下方的属于变色鸢尾。这样的方式叫作分类器\n但是你也发现了，这里有无数直线都可以的可能来讲他们分开。你想到现在大家都在谈用计算机来帮我们完成一些任务，那么要怎么才能让分类器自己学习得到分类直线呢。\n试一试：\n    </h5>\n    <li>\n        <a target=\"_blank\" href=\"/dist/indexnn.html\">尝试下神经网络吧</a>\n    </li>\n  </div>\n\n    <!-- More -->\n  <div class=\"more\">\n    <!-- <button class=\"mdl-button mdl-js-button mdl-button--icon\"><i class=\"material-icons\">keyboard_arrow_down</i></button> -->\n    <button class=\"mdl-button mdl-js-button mdl-button--fab\">\n      <i class=\"material-icons\">keyboard_arrow_down</i>\n    </button>\n  </div>\n\n  <div class=\"name_md extra\" id=\"One\"><h2>4. KNN</h2></div>\n  <div>\n    <h5>\n      你觉得这样好像还不错。于是你在更远处的一块地，发现那里的鸢尾花好像和前面两种也有不同之处，它们长得更高，更细长。\n      于是你认为植物园的工作人员们可能将某一类鸢尾花集中地种在了某一块地方，于是你测量更多的数据重新绘制了一张坐标图。\n      但是新的问题来了，要怎么判断中间一些点的种类到底是什么呢。\n      于是你想到了一句谚语：“近朱者赤近墨者黑。”\n      试一试：\n    </h5>\n    <li>\n        <a target=\"_blank\" href=\"/dt/index.html\">尝试下KNN吧</a>\n    </li>\n  </div>\n\n  <div id='knnss'>\n    <Knn />\n  </div>\n\n<div class=\"name_md extra\" id=\"One\"><h2>5.CNN-一气呵成</h2></div>\n  <div>\n    <h5>\n      然后你发现这几种方法各有好坏，也有不足。\n而且测量起来特别麻烦。\n你想到了我们都在用的一些识别植物的APP，于是你打开了一个软件，拍了一张照片，立马就将它分为了山鸢尾花。这是怎么一回事呢。\n这个又用的哪些特征呢。\n这个和上面的方法有什么不同之处呢。\n试一试：\n\n    </h5>\n    <li>\n        <a target=\"_blank\" href=\"/cnn\">尝试下CNN吧</a>\n    </li>\n  </div>\n\n  <!-- More -->\n  <div class=\"more\">\n    <!-- <button class=\"mdl-button mdl-js-button mdl-button--icon\"><i class=\"material-icons\">keyboard_arrow_down</i></button> -->\n    <button class=\"mdl-button mdl-js-button mdl-button--fab\">\n      <i class=\"material-icons\">keyboard_arrow_down</i>\n    </button>\n  </div>\n\n  <div class=\"name_md extra\" id=\"One\"><h2>6.不同模型比较</h2></div>\n  <div>\n    <h5>\n      *****************一些交互***********************\n    </h5>\n  </div>\n\n</div>",
    "<script>\n  import Knn from \"./Knn.svelte\";\n  import Tree from \"./Tree.svelte\";\n  import { onMount } from \"svelte\";\n  import { tick } from \"svelte\";\n  import { link } from \"svelte-spa-router\";\n\n  var cont;\n  var elsArr;\n  var closeBtnsArr;\n  var dcont;\n  var selected = 0;\n  var dynamiccss = \"cont s--inactive\";\n  // 不加onMount  cont取不到值\n  onMount(async () => {\n    cont = document.querySelector(\".cont\");\n    elsArr = [].slice.call(document.querySelectorAll(\".el\"));\n    closeBtnsArr = [].slice.call(document.querySelectorAll(\".el__close-btn\"));\n\n    setTimeout(function() {\n      // cont.classList.remove('s--inactive');\n      dynamiccss = \"cont\";\n    }, 200);\n\n    elsArr.forEach(function(el, index) {\n      el.addEventListener(\n        \"click\",\n        function() {\n          selected = index + 1;\n          // if (this.classList.contains('s--active')) return;\n          // cont.classList.add('s--el-active');\n          // this.classList.add('s--active');\n        },\n        true\n      );\n    });\n\n    closeBtnsArr.forEach(function(btn) {\n      btn.addEventListener(\n        \"click\",\n        function(e) {\n          e.stopPropagation();\n          selected = 0;\n          // cont.classList.remove('s--el-active');\n          // document.querySelector('.el.s--active').classList.remove('s--active');\n        },\n        true\n      );\n    });\n  });\n</script>\n\n<style>\n  #begin {\n    margin-top: 60px;\n    margin-bottom: 60px;\n    margin-left: auto;\n    margin-right: auto;\n    max-width: 78ch;\n  }\n  .t {\n    font-size: 20px;\n  }\n  .flower {\n    color: steelblue;\n  }\n</style>\n\n<div id=\"begin\">\n  <p>\n    “UnboxAI打造了一个全套的教学生态系统来辅助智慧校园中开设的人工智能的课程，可以脱离纸质书籍教学，所有的内容均在电脑或者平板上完成。UnboxAI以第一人称的角色，通过算法可视化，用户可交互性带给同学们更强的体验感，有助于更好地理解人工智能算法背后的原理并激发同学们继续深入学习机器学习、深度学习的相关数学、编程知识。”\n  </p>\n  <br/>\n  <h1 style=\"color: peru;\">欢迎来到UnboxAI，在这里我们将以情节的方式，在不同的故事线中，由浅入深地带你学习人工智能的相关知识。</h1>\n  <br/>\n  <br/>\n  <div id=\"one\">\n    <h1 style=\"font-weight:500 \">故事线——植物园（分类任务）</h1>\n  </div>\n  <div id=\"article\">\n    <p class=\"t\">\n      学校组织去植物园春游，一片特别好看的蓝紫色的花海映入你眼帘，像一只只穿梭在绿草中的美丽蝴蝶。\n    </p>\n    <p class=\"t\">\n      你看到牌上的介绍说：这是鸢尾花，常见的有三大类:\n      <b class=\"flower\">山鸢尾</b>\n      (Iris-setosa)，\n      <b class=\"flower\">变色鸢尾</b>\n      (Iris-versicolor)和\n      <b class=\"flower\">维吉尼亚鸢尾</b>\n      (Iris-virginica)。\n    </p>\n    <p class=\"t\">\n      它们有着形状与色彩相似的花瓣和萼片。你观察到有一块集中的部分的鸢尾有较大的花瓣，而它旁边的一块的花瓣却很小。你想搞清楚它们究竟属于哪一类鸢尾花。\n    </p>\n    <p class=\"t\">\n      于是你上网搜索，发现网上说可以根据一些特征值来刻画事物的某些方面的特点，比如通过花萼的长、花萼的宽、花瓣的长和花瓣的宽来辨别他们。\n    </p>\n    <p class=\"t\">\n      <b>让我们从section1开始吧！</b>\n    </p>\n  </div>\n</div>\n\n<div class={selected > 0 ? 'cont s--el-active' : dynamiccss}>\n  <!-- cont inner start -->\n  <div class=\"cont__inner\">\n    <!-- el start -->\n    <div class={selected === 1 ? 'el s--active' : 'el'}>\n      <div class=\"el__overflow\">\n        <div class=\"el__inner\">\n          <div class=\"el__bg\" />\n          <div class=\"el__preview-cont\">\n            <h2 class=\"el__heading\" style=\"color:#f6f6f6\">Section 1</h2>\n          </div>\n          <div class=\"el__content\">\n            <a href=\"/old\" use:link rel=\"prefetch\">\n              <div class=\"el__text\">Enter Section 1</div>\n            </a>\n            <div class=\"el__close-btn\" />\n          </div>\n        </div>\n      </div>\n      <div class=\"el__index\">\n        <div class=\"el__index-back\">1</div>\n        <div class=\"el__index-front\">\n          <div class=\"el__index-overlay\" data-index=\"1\">1</div>\n        </div>\n      </div>\n    </div>\n    <!-- el end -->\n    <!-- el start -->\n    <div class={selected === 2 ? 'el s--active' : 'el'}>\n      <div class=\"el__overflow\">\n        <div class=\"el__inner\">\n          <div class=\"el__bg\" />\n          <div class=\"el__preview-cont\">\n            <h2 class=\"el__heading\" style=\"color:#f6f6f6\">Section 2</h2>\n          </div>\n          <div class=\"el__content\">\n            <a href=\"/knn\" use:link rel=\"prefetch\">\n              <div class=\"el__text\">Enter Section 2</div>\n            </a>\n            <div class=\"el__close-btn\" />\n          </div>\n        </div>\n      </div>\n      <div class=\"el__index\">\n        <div class=\"el__index-back\">2</div>\n        <div class=\"el__index-front\">\n          <div class=\"el__index-overlay\" data-index=\"2\">2</div>\n        </div>\n      </div>\n    </div>\n    <!-- el end -->\n    <!-- el start -->\n    <div class={selected === 3 ? 'el s--active' : 'el'}>\n      <div class=\"el__overflow\">\n        <div class=\"el__inner\">\n          <div class=\"el__bg\" />\n          <div class=\"el__preview-cont\">\n            <h2 class=\"el__heading\" style=\"color:#f6f6f6\">Section 3</h2>\n          </div>\n          <div class=\"el__content\">\n            <a href=\"/tree\" use:link rel=\"prefetch\">\n              <div class=\"el__text\">Enter Section 3</div>\n            </a>\n            <div class=\"el__close-btn\" />\n          </div>\n        </div>\n      </div>\n      <div class=\"el__index\">\n        <div class=\"el__index-back\">3</div>\n        <div class=\"el__index-front\">\n          <div class=\"el__index-overlay\" data-index=\"3\">3</div>\n        </div>\n      </div>\n    </div>\n    <!-- el end -->\n    <!-- el start -->\n    <div class={selected === 4 ? 'el s--active' : 'el'}>\n      <div class=\"el__overflow\">\n        <div class=\"el__inner\">\n          <div class=\"el__bg\" />\n          <div class=\"el__preview-cont\">\n            <h2 class=\"el__heading\" style=\"color:#f6f6f6\">Section 4</h2>\n          </div>\n          <div class=\"el__content\">\n            <a href=\"/cnn\" use:link rel=\"prefetch\">\n              <div class=\"el__text\">Enter Section 4</div>\n            </a>\n            <div class=\"el__close-btn\" />\n          </div>\n        </div>\n      </div>\n      <div class=\"el__index\">\n        <div class=\"el__index-back\">4</div>\n        <div class=\"el__index-front\">\n          <div class=\"el__index-overlay\" data-index=\"4\">4</div>\n        </div>\n      </div>\n    </div>\n    <!-- el end -->\n    <!-- el start -->\n    <div class={selected === 5 ? 'el s--active' : 'el'}>\n      <div class=\"el__overflow\">\n        <div class=\"el__inner\">\n          <div class=\"el__bg\" />\n          <div class=\"el__preview-cont\">\n            <h2 class=\"el__heading\" style=\"color:#f6f6f6\">Section 5</h2>\n          </div>\n          <div class=\"el__content\">\n            <a href=\"/\" use:link rel=\"prefetch\">\n              <div class=\"el__text\">Enter Section 5</div>\n            </a>\n            <div class=\"el__close-btn\" />\n          </div>\n        </div>\n      </div>\n      <div class=\"el__index\">\n        <div class=\"el__index-back\">5</div>\n        <div class=\"el__index-front\">\n          <div class=\"el__index-overlay\" data-index=\"5\">5</div>\n        </div>\n      </div>\n    </div>\n    <!-- el end -->\n  </div>\n  <!-- cont inner end -->\n</div>\n<footer style=\"background-color: #37474f\">\n  <span\n    style=\"text-align: right;color: #f6f6f6;font-weight:300;;font-size: 13px\">\n    Deecamp2020 4-2 UnboxTherapy\n  </span>\n</footer>\n"
  ],
  "names": [],
  "mappings": "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"
}